the homework for october 28th is done.
now I just have to figure out project 14

...

<!-- <iframe  src="https://github.com/kennethlarotyamat/miscellaneous" style="aspect-ratio: 8.68/6.86; height: auto; width:100%;" scrolling="yes"   
allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen ></iframe> -->
<!-- <link rel="stylesheet" href="..\miscellaneous\css\index.css"> -->
<!-- <link rel="stylesheet" href="https://kennethlarotyamat.github.io/miscellaneous/css/index.css"> [this works] -->
<link rel="stylesheet" href="https://kennethlarotyamat.github.io/miscellaneous/css/index.css">
<!-- <iframe  src="https://github.com/kennethlarotyamat/miscellaneous" style="aspect-ratio: 8.68/6.86; height: auto; width:100%;" scrolling="yes"   
allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen ></iframe> -->
<!-- <link rel="stylesheet" href="..\miscellaneous\css\index.css"> -->
<!-- <link rel="stylesheet" href="https://kennethlarotyamat.github.io/miscellaneous/css/index.css"> [this works] -->

...

1. Project

Communicating on the Web

For this project, you will be adding something we’ve studied this week to your personal web page. This makes the code yours, 
and can be an example of your knowledge. There doesn’t necessarily have to be a purpose for what you choose to add; in some 
ways you simply want to show off your skills to a potential employer. Choose from:

Leaflet

Asynchronous Functions [asynchronous functions]

Collect form information in json format

Google Maps

Whatever you choose, be sure to have clear comments in your code so a reviewer can understand what you did, and also so you can 
go back a month or more later and be reminded of what your thought process was.
When finished, submit your code!

Submission steps:

Before you click on "Mark as Completed":

You need to do one of the following: either upload all of your files to Codio or deploy a GitHub Page for this project.
Also, if you mark this project as complete but any of the boxes are blank, your TA will be unable to grade your project.

Codio upload:

Make sure all of your project code has been uploaded to Codio.
If you did not write your code in Codio, you will need to import all of the required files into your workspace file tree.
You can do this by going to File => Upload Files, and either manually importing each file, or dragging and dropping your project folder.
Please refer to this video if you are unsure of what to do.

GitHub Pages:

If you would rather upload your project to GitHub, please make sure to have the project deployed as a GitHub page 
so we can thoroughly test it. If you are unsure of how to do this, please follow these instructions.
It is important to understand you will need to make a separate repository for every project. You cannot deploy multiple 
pages from the same repository, even with different branches.
Also, no matter whether you uploaded your files from your computer or not, make sure to thoroughly test your code! This 
only takes a few minutes, but will prevent the amount of resubmissions because you missed something.

...

[Asynchronous functions] [Module Dealing with Asynchronous Functions]

https://www.youtube.com/watch?v=o2uivI8FdTc

[https://docs.google.com/document/d/1nC59RMOhZAWZO1_fdGAaeykVETOt3ODm5G2u9lPBda0/edit#heading=h.ik10jyq3fy44]

2

Communicating on the Web: HTTP/HTTPS, APIs, Async 1 - Thursday, October 26

In the first lesson you will understand what Synchronous means, understand what Asynchronous means, 
and build Asynchronous functions with JavaScript. In the second lesson you will understand Javascript 
Promises, learn how use Javascript Promises, and know the benefits of Javascript Promises. In the third 
lesson you will understand how an API works, know its different architectures, and create your own API.

...

I'm going to rule out working on a Leafelet or a Google Maps project for Project 14

[Collect form information in json format]

This seems like the best option because we've come across these before, so, I might be more 
familar with them, the other stuff is newer. In fact, I think that I was going to use a json file 
for project 12, but I think I put that off.

[https://docs.google.com/document/d/1nC59RMOhZAWZO1_fdGAaeykVETOt3ODm5G2u9lPBda0/edit#heading=h.ik10jyq3fy44]

...


Daryl - TA
8:58 AM

Hello @channel, please find Project Time schedules for this week below:
:alphabet-yellow-hash: What is Project Time?
It is a live zoom session where you work on your weekly project individually and a TA is available to answer any questions you might have regarding the project. If plan to work on the project later this week but have questions, you can always drop by and ask those questions.
You are able to attend either or both project sessions. If you can't make project times but need help, check office hour availability bookmarked at the top of this channel! Or feel free to check if other TAs are available as well: Software Web Development 4 TA Availability

:date: Wednesday, November 1st, 8:00pm - 9:00pm ET / 5:00pm - 6:00pm PT
:round_pushpin:Zoom
:microphone: Hosted by 
@Daryl - TA

:date: Thursday, November 2nd, 7:00 - 9:00pm ET / 4:00pm - 6:00pm PT
:round_pushpin:Zoom
:microphone: Hosted by 
@Jheremy - TA

:point_right: p.s: Please review all the materials from the prior modules before starting your projects.

...

Week 15 (10/24-10/28)
Module 14: Communicating on the Web: HTTP/HTTPS, APIs, Async


1

Professional Development #4 - Tuesday, October 24



2

Communicating on the Web: HTTP/HTTPS, APIs, Async 1 - Thursday, October 26

In the first lesson you will understand what Synchronous means, understand what Asynchronous means, and build Asynchronous functions with JavaScript. In the second lesson you will understand Javascript Promises, learn how use Javascript Promises, and know the benefits of Javascript Promises. In the third lesson you will understand how an API works, know its different architectures, and create your own API.

Session Recording - Module 14 Day 1 - Thurs., October 26
Module 14 Lesson 1.1
Module 14 Lesson 1.2
Module 14 Lesson 1.3

3

Communicating on the Web: HTTP/HTTPS, APIs, Async 2 & 3 - Saturday, October 28

Part 2: In the first lesson you will understand the usefulness of JSON files, know the structure of a JSON file and be able to build a JSON file. In the second lesson you will know how to work with the fetch method, be able to get data using the fetch method and execute a public free API. In the third lesson you will learn how to work with Leaflet, implement a solution with maps using Leaflet and practice knowledge in JavaScript. Part 3: In the first lesson you will learn how to set up Google Cloud ,create a project in Google Cloud, learn how to use Google Maps API and how to enable APIs in Google Cloud. In the second lesson you will learn how to use Google API keys in your deploy, how to restrict an API key and develop some simple examples using Google Maps APIs. In the third lesson you will practice all of the concepts and topics learned in this week, explore Google documentation and learn new things and finally improve your skills in JavaScript and in working with APIs.

Session Recording - Module 14 Day 2 - Sat., October 28
Module 14 Lesson 2.1
Module 14 Lesson 2.2
Module 14 Lesson 2.3
Module 14 Lesson 3.1
Module 14 Lesson 3.2
Module 14 Lesson 3.3
Project 14

...

[Project 14 Notes]

I'm leaning toward doing a json. to doing the json option, but I want to see if there is anything
that I could do with Asynchronous Functions.

...

Spanish
English
diversion
fun
Community Verified icon Verified

Translations of diversión
noun
fun
diversión, alegría, broma, chirigota
diversion
desviación, diversión, distracción, trasvase, entretenimiento, descanso
amusement
diversión, esparcimiento, entretenimiento, regocijo, distracción, atracción
entertainment
entretenimiento, diversión, espectáculo, agasajo
play
juego, obra, jugada, diversión, teatro, holgura
relaxation
relajación, descanso, relajamiento, aflojamiento, diversión, recreo
avocation
pasatiempo, distracción, afición, ocupación, diversión

...

I'm only familiar with pasatiempo as the word I'm looking for.

...

[https://www.youtube.com/watch?v=NYatLKK31-g]

...

where was I?

...

Goals
By the end of this lesson you will:
Understand what Synchronous means
Understand what Asynchronous means
Build Asynchronous functions with JavaScript
Introduction
This lesson explains the difference between Synchronous and Asynchronous JavaScript and how to build these functions in JavaScript. The topics covered will help you understand how JavaScript works by way of Synchronous or Asynchronous loading.
JavaScript is a single-threaded synchronous language, which means that the code is executed in order, one piece at a time. However, in some situations, JavaScript may appear to be asynchronous. This is made possible through the use of functions that allow the code to be executed out of order, at a different time than when it was dispatched. This change in the order of execution is known as asynchronous execution.

...

1. Synchronous & Asynchronous JavaScript
synchronous asynchronous
Goals
By the end of this lesson you will:
Understand what Synchronous means
Understand what Asynchronous means
Build Asynchronous functions with JavaScript
Introduction
This lesson explains the difference between Synchronous and Asynchronous JavaScript and how to build these functions in JavaScript. The topics covered will help you understand how JavaScript works by way of Synchronous or Asynchronous loading.
JavaScript is a single-threaded synchronous language, which means that the code is executed in order, one piece at a time. However, in some situations, JavaScript may appear to be asynchronous. This is made possible through the use of functions that allow the code to be executed out of order, at a different time than when it was dispatched. This change in the order of execution is known as asynchronous execution.
Next

...

1. Synchronous & Asynchronous JavaScript
synchronous asynchronous
Goals
By the end of this lesson you will:
Understand what Synchronous means
Understand what Asynchronous means
Build Asynchronous functions with JavaScript
Introduction
This lesson explains the difference between Synchronous and Asynchronous JavaScript and how to build these functions in JavaScript. The topics covered will help you understand how JavaScript works by way of Synchronous or Asynchronous loading.
JavaScript is a single-threaded synchronous language, which means that the code is executed in order, one piece at a time. However, in some situations, JavaScript may appear to be asynchronous. This is made possible through the use of functions that allow the code to be executed out of order, at a different time than when it was dispatched. This change in the order of execution is known as asynchronous execution.
Next

...

2. What is Synchronous Execution?
Synchronous execution in JavaScript refers to events that occur sequentially, one after another. It’s like doing things in a straight line, with one thing happening at a time. This means that the code is executed in a single-threaded manner.
synchronous asynchronous image
The figure above shows an example of synchronous execution, where Process A dispatches (calls) Process B. During this time, Process A pauses and waits until Process B runs to completion. Once Process B is complete, it returns to Process A, and Process A resumes its execution. This is because JavaScript is single-threaded / synchronous, which means that only one process can run at a time.
In this example, you will see how synchronous JavaScript works in practice:
<!DOCTYPE html>
<html lang="en">
<head>
   <meta charset="utf-8" />
   <title>Synchronous</title>
</head>
<body>
   <div id="message"></div>
   <script>
       var msg = document.getElementById("message");
 
       function fun1() {
           msg.innerHTML += "<p>fun1 started :)</p>";
           fun2();
           msg.innerHTML += "<p>fun1 ended :)</p>";
       }
       function fun2() {
           msg.innerHTML += "<p>fun2 started :)</p>";
           msg.innerHTML += "<p>fun2 ended :)</p>";
       }
       fun1();
   </script>
</body>
</html>
Output
fun1 started :)
fun2 started :)
fun2 ended :)
fun1 ended :)
When dealing with a large amount of code, synchronous loading of JavaScript files can be time consuming. Since long load times are undesirable, we solve this problem with asynchronous loading.
What is Asynchronous Loading?
With asynchronous loading, events take place independent of the main process allowing for the execution of several processes in parallel.
synchronous asynchronous
Process A dispatches Process B. Process A continues to execute in parallel with Process B to completion without depending on one another. In this way, total execution time is reduced and a faster load time is achieved.
Following a single recipe is most likely a(n) 
Synchronous
 task. Cooking three dishes simultaneously is most likely a(n) 
Asynchronous
 task.
Check It! (2 left)
Next

...

3. How to create an Asynchronous function in JavaScript
<!DOCTYPE html>
<html lang="en">
<head>
   <meta charset="utf-8" />
   <title>Asynchronous</title>
</head>
<body>
   <div id="text"></div>
   <script>
       var msg = document.getElementById("text");
 
       function fun1() {
           setTimeout(function () {
              msg.innerHTML += "<p>fun1 started :)</p>";
              msg.innerHTML += "<p>fun1 ended :)</p>";
           },100);
       }
      function fun2() {
           msg.innerHTML += "<p>fun2 started :)</p>";
           fun1();
           msg.innerHTML += "<p>fun2 ended :)</p>";
       }
 
       fun2();
   </script>
</body>
</html>
Output
fun2 started :)
fun2 ended :)
fun1 started :)
fun1 ended :)
Step by step of previous code:
The code calls function fun2()
The function fun2() shows text “fun2 started :)”
The function fun2() calls function fun1()
The function fun1() waits for 100 ms before outputting its text, but function fun2() does not wait for fun1() to be finished before moving on; fun2() jumps on the next statement immediately and shows the text “fun2 ended :)”
After of 100 ms, function fun1() executes its next statement showing text “fun1 started :)”
Function fun1() then shows text “fun1 ended :)”
Because the two functions can run in parallel, asynchronous JavaScript loads more quickly than synchronous JavaScript.
In the previous code example, we used the setTimeout(Function, Time in milliseconds) function to delay the execution of fun1() by 100ms. This function allows you to pause the execution of a piece of code for the amount of time specified in the function argument before resuming its execution.
Additionally, we can use the setInterval(Function, Time in milliseconds) function to repeatedly execute a piece of code at a specified time interval. This function is useful when we need to run a certain piece of code repeatedly, such as updating the user interface or making periodic requests to a server.
Let’s see it in action:
<!DOCTYPE html>
<html lang="en">
<head>
   <meta charset="utf-8" />
   <title>Asynchronous</title>
</head>
<body>
   <div id="text"></div>
   <script>
       var msg = document.getElementById("text");
 
       function fun1() {
           setInterval(function () {
              msg.innerHTML += "<p>fun1 started :)</p>";
              msg.innerHTML += "<p>fun1 ended :)</p>";
           },60000);
       }
      function fun2() {
           msg.innerHTML += "<p>fun2 started :)</p>";
           fun1();
           msg.innerHTML += "<p>fun2 ended :)</p>";
       }
 
       fun2();
   </script>
</body>
</html>
Output
fun2 started :)
fun2 ended :)
fun1 started :)
fun1 ended :)
fun1 started :)
fun1 ended :)
… 
fun1 started :)
fun1 ended :)
Every 60 seconds, the function fun1() will be called.
Warning: the function setInterval could run infinitely without stopping. Be sure to tell it when to stop.
Next

...

4. How to create an Asynchronous function in JavaScript part 2
Exercise 2:
Build a clock using the function setInterval()
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <title>Clock</title>
</head>
<body>
  <div id="text"></div>
  <script>
       var msg = document.getElementById("text");
      function clock() {
          //code here
      }
      clock();
  </script>
</body>
</html>
Tip: Use the Date object, for more information here.
We can implement asynchronous functions using the async, await, and Promise keywords. The async keyword defines an asynchronous function, which allows us to write asynchronous code that looks and behaves like synchronous code.
By using the async keyword, we can make a function return a Promise, which can be resolved or rejected at a later time. The await keyword is used to wait for the completion of a Promise, which allows us to write code that looks like synchronous code but behaves asynchronously.
Syntax
async function FunctionName(){
    ...
}
await: The “async” function contains “await” which pauses execution of an “async” function. “await” is only valid inside the “async” function.
<!DOCTYPE html>
<html lang="en">

<head>
   <meta charset="utf-8" />
   <title>Asynchronous function using "Async"</title>
</head>

<body>
   <div id="text"></div>

   <script>
       var msg = document.getElementById("text");
       function fun1() {
           return new Promise(function (resolve, reject) {
               setTimeout(function () {
                   msg.innerHTML += "<p>fun1 started :)</p>";
                   msg.innerHTML += "<p>fun1 ended :)</p>";
                   resolve();
               }, 100);
           });
       }

       async function fun2() {
           msg.innerHTML += "<p>fun2 started :)</p>";
           await fun1();
           msg.innerHTML += "<p>fun2 ended :)</p>";
       }

       fun2();
   </script>

</body>

</html>
Output
fun2 started :)
fun1 started :)
fun1 ended :)
fun2 ended :)
In the above example, the engine waits for fun1() to finish its execution before executing the next line. The “await” stops the execution of that code segment until a Promise is received.
Why use await if async is faster?
async allows for faster code execution, but it can cause issues when order or dependencies matter. await can pause execution until a process completes to ensure correct code execution and avoid errors.
Next

...

5. Conclusion & Takeaways
Asynchronous JavaScript is a powerful functionality that can be incredibly helpful in your journey as a web developer. By allowing for multiple processes to run simultaneously, asynchronous code can greatly improve the performance and functionality of your applications.
However, it’s important to be careful when using the setInterval function, which can cause your code to run indefinitely without stopping. To avoid this issue, it’s important to specify when the interval should stop running, either by using clearInterval or by implementing a stop condition within your code.
By using asynchronous JavaScript correctly and being mindful of potential issues, you can take full advantage of its benefits and build high-quality, efficient web applications.
Attribution
Asynchronous JavaScript . (n.d.). https://www.w3schools.com/js/js_asynchronous.asp
GeeksforGeeks. (2021, December 17). How to create an Asynchronous function in Javascript? https://www.geeksforgeeks.org/how-to-create-an-asynchronous-function-in-javascript/
Mark as UncompletedBack to dashboard

...

[Project 14 Notes]

So I was originally going to do

...

I might use aynchronous functions, and json files into project 14.

...