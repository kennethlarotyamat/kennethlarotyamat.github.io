2. What is a JSON file?
JSON (JavaScript Object Notation) is a file format that is easily readable for a human and requires less formatting. 
It is used for sharing or transmitting data to store. The extension of this type of file is .JSON and it is supported 
by many modern programming languages.
The media type used for JSON is application/json.
JSON File Structure
JSON is structured with key and value pairs. The key is unique and is a string surrounded by double quotation marks. 
The Value can be a Number, string (surrounded by double quotation marks), Array, Boolean, null and object. The key and 
value are separated by a colon(:) in the middle with the key on the left and the value on the right. Different key/value 
pairs are separated by a comma(,).

...

Examples by types values:
Number
{"age" : 34}
String
{"name" : "Joseph"}
Array
{"fruits" : ["Apple","Banana","Strawberry"]}
Boolean
{"Enable" : true}
Null
{"genre" : null}
Object
{"user" : {"name" : "Joseph", "age" : 34, "genre" : null}}

...

Resources:          [https://www.youtube.com/watch?v=nXLkuXX88w8]
                    [https://www.geeksforgeeks.org/json-data-types/]
                    [https://docs.fileformat.com/web/json/]


...

Christopher	7464839	+1457938740	Read, Sing, Dance	Name:HTML, ID:1; Name:Javascript, ID:2; Name:API; ID:3

...

Exercise 3
Build a JSON file for the data below (hint: think of this as a user object).
Name	        Id	            Telephone number	    Hobbies	            Lessons
Christopher	    7464839	    +1457938740	            Read, Sing, Dance	Name:HTML, ID:1; Name:Javascript, ID:2; Name:API; ID:3

...

{"user" : {"name" : "Joseph", "age" : 34, "genre" : null}}

{"Name" : "Christopher", "Id" : 7464839, "TelephoneNumber" : +1457938740, "Hobbies" : ["Read, Sing, Dance"], 
"Lessons" [{"Name":"HTML", "ID":1}{"Name":"Javascript", "ID":2 }{"Name":"API", "ID":3}] }

...

oct28lesson2-1

...

1. Accessing APIs with Fetch
javascript fetch api
Goals
By the end of this lesson you will:
Know how to work with the fetch method
Be able to get data using the fetch method
Be able to execute a public free API
Introduction
The fetch() method easily connects the server to the client. You need only type the URL of the API and a second 
parameter for POST requests. With the fetch() method you can execute an API (if you have access) and begin to 
interact a little more with APIs to see an API in action. Also, the fetch() method allows you to get data and show it on your page.

...

[Resources] 

[https://youtu.be/nXLkuXX88w8?t=1461]

...

what happened, well. I attended class, on saturday, but I was still working on project 13 on Saturday. I could have 
completed this stuff that day, and in retrospect, I should have just done this stuff on Saturday.

I'm going to take a short break.

...

2. fetch() Method in Javascript
fetch diagram
fetch() Method in Javascript
The fetch() method is used to request data from a server for any type of API that returns the data in JSON or XML format.
Syntax
fetch('url')
  .then(response => response.json())
  .then(data => console.log(data));
The fetch() method requires one parameter: the URL to request. It accepts two parameters and returns a promise. The second 
parameter is an array of properties.
For the next example we will use a free API found here.

[Resources]             [https://apipheny.io/free-api/#apis-without-key]

...

<!DOCTYPE html>
<html lang="en">
<head>
 <meta charset="UTF-8">
 <meta name="viewport" content="width=device-width, initial-scale=1.0">
 <title>C1 | JavaScript | fetch() Method</title>
</head>
<body>
 <script src="/.guides/console.js"> </script>
    <script>
        let result = fetch("https://www.boredapi.com/api/activity");
        result.then(res => res.json())
              .then(d => { console.log(d)});
    </script>
</body>
</html>

...

The return value is a promise whether it is resolved or not. The return data can be of the format JSON or XML. 
It can be an array of objects or simply a single object.

...

[How many parameters are accepted? And What value is required?]

2 parameter's are accepted, The first parameter is required is a URL, and the second parameter is optional.

...

<!-- Fetching data with options: -->
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>C1 | JavaScript | fetch() Method with Options</title>
</head>

<body>
    <script>
        user = {
            "name": "Christopher Miller",
            "age": "35",
            "salary": "4321"
        };
        let options = {
            method: 'POST',
            headers: {
                'Content-Type':'application/json;charset=utf-8'
            },
            body: JSON.stringify(user)
        };
        // Rest API example
        let result = fetch("https://dummy.restapiexample.com/api/v1/create", options);
        result.then(res => res.json())
              .then(d => {console.log(d)});
    </script>
</body>

</html>

...

    <script>
        user = {
            "name": "Christopher Miller",
            "age": "35",
            "salary": "4321"
        };
        let options = {
            method: 'POST',
            headers: {
                'Content-Type':'application/json;charset=utf-8'
            },
            body: JSON.stringify(user)
        };
        // Rest API example
        let result = fetch("https://dummy.restapiexample.com/api/v1/create", options);
        result.then(res => res.json())
              .then(d => {console.log(d)});
    </script>

...

{"status":"success","data":{"name":"Christopher Miller","age":"35","salary":"4321","id":7993},"message":"Successfully! Record has been added."}

...

<!DOCTYPE html>
<html lang="en">
<head>
 <meta charset="UTF-8">
 <meta name="viewport" content="width=device-width, initial-scale=1.0">
 <title>C1 | JavaScript | fetch() Method</title>
</head>
<body>
 <script src="/.guides/console.js"> </script>
 
    <script>
        user = {
            "name": "Christopher Miller",
            "age": "35",
            "salary": "4321"
        };
        let options = {
            method: 'POST',
            headers: {
                'Content-Type':'application/json;charset=utf-8'
            },
            body: JSON.stringify(user)
        };
        // Rest API example
        let result = fetch("https://dummy.restapiexample.com/api/v1/create", options);
        result.then(res => res.json())
              .then(d => {console.log(d)});
    </script>


    
</body>
</html>

...

<!DOCTYPE html>
<html lang="en">
<head>
 <meta charset="UTF-8">
 <meta name="viewport" content="width=device-width, initial-scale=1.0">
 <title>C1 | JavaScript | fetch() Method</title>
</head>
<body>
 <script src="/.guides/console.js"> </script>
 
    <script>
        user = {
            "name": "Christopher Miller",
            "age": "35",
            "salary": "4321"
        };
        let options = {
            method: 'POST',
            headers: {
                'Content-Type':'application/json;charset=utf-8'
            },
            body: JSON.stringify(user)
        };
        // Rest API example
        let result = fetch("https://dummy.restapiexample.com/api/v1/create", options);
        result.then(res => res.json())
              .then(d => {console.log(d)});
    </script>


    
</body>
</html>

...

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>C1 | JavaScript | fetch() Method Exercise</title>
</head>

<body>
    <script>
        //Completed code here
    </script>
    <img id="imageAPI" width="500" height="600">
</body>

</html>

...

<!-- myDogImg = document.getElementbyID("imageAPI").src -->
<!-- result or response check difference in javascript -->
<!-- https://dog.ceo/api/breeds/image/random -->
<!-- src="  " -->
<!-- https://dog.ceo/api/breeds/image/random -->

...

[Final Working Version]

<!DOCTYPE html>
<html lang="en">

<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>C1 | JavaScript | fetch() Method Exercise</title>
</head>

<body>
<script>
//Completed code here



let result = fetch("https://dog.ceo/api/breeds/image/random");
result.then(res => res.json())
.then(d => {document.getElementById("imageAPI").src=d.message});
</script>


<img id="imageAPI" width="500" height="600" >

</body>


</html>

...

[https://sabrinaprinter-groupsphere.codio.io/example.html]

...

3. Conclusion & Takeaways
The fetch() method has two parameters, the URL of the API and a second parameter for options.
The fetch() method is very easy to use, you can try to do several tests to see it in action, there are many free APIs on the web.
Attribution
Team, A. (2022, February 19). Free API – Huge List of Public APIs For Testing [No Key]. Apipheny. https://apipheny.io/free-api/
GeeksforGeeks. (2022, October 19). JavaScript | fetch() Method. https://www.geeksforgeeks.org/javascript-fetch-method/
GeeksforGeeks. (2021a, January 8). How to use JavaScript Fetch API to Get Data ? https://www.geeksforgeeks.org/how-to-use-javascript-fetch-api-to-get-data/?ref=rp

[https://apipheny.io/free-api/]
[https://www.geeksforgeeks.org/javascript-fetch-method/]
[https://www.geeksforgeeks.org/how-to-use-javascript-fetch-api-to-get-data/?ref=rp]
[https://sabrinaprinter-groupsphere.codio.io/example.html]
[https://youtu.be/nXLkuXX88w8?t=2914]
[https://youtu.be/nXLkuXX88w8?t=3415]

...

lesson-2-2---sat---oct-28

...

[https://youtu.be/nXLkuXX88w8?t=2914]

...

lesson-2-2-sat-oct-28

...

1. Project [14] 

Communicating on the Web

For this project, you will be adding something we’ve studied this week to your personal web page. 
This makes the code yours, and can be an example of your knowledge. There doesn’t necessarily have to 
be a purpose for what you choose to add; in some ways you simply want to show off your skills to a 
potential employer. Choose from:

Leaflet

Asynchronous functions
Collect form information in json format

Google Maps

Whatever you choose, be sure to have clear comments in your code so a reviewer can understand what you did, 
and also so you can go back a month or more later and be reminded of what your thought process was.
When finished, submit your code!

Submission steps:

Before you click on "Mark as Completed":

You need to do one of the following: either upload all of your files to Codio or deploy a GitHub Page for this project.
Also, if you mark this project as complete but any of the boxes are blank, your TA will be unable to grade your project.

Codio upload:

Make sure all of your project code has been uploaded to Codio.
If you did not write your code in Codio, you will need to import all of the required files into your workspace file tree.
You can do this by going to File => Upload Files, and either manually importing each file, or dragging and dropping your project folder.
Please refer to this video if you are unsure of what to do.

GitHub Pages:

If you would rather upload your project to GitHub, please make sure to have the project deployed as a GitHub page so we can thoroughly test it.
If you are unsure of how to do this, please follow these instructions.
It is important to understand you will need to make a separate repository for every project. You cannot deploy 
multiple pages from the same repository, even with different branches.
Also, no matter whether you uploaded your files from your computer or not, make sure to thoroughly test your code! 
This only takes a few minutes, but will prevent the amount of resubmissions because you missed something.

[Project 14 Requirements]

...

Stargate, Roland Emmerich (1994)

[https://www.youtube.com/watch?v=lsuY5dYxOCs]

Roland Emmerich Filmography

In addition to film,[51] Emmerich also co-created and produced the short-lived television series 
The Visitor, and, in 2001, directed a one-minute commercial 
entitled "Infinite Possibilities" for DaimlerChrysler.[52]

Film

Year	Title	                        Director	Writer	Producer
1979	Franzmann	                    Yes	        Yes	    No
        Wilde Witwe (Short film)	    Yes	        No	    No
1984	The Noah's Ark Principle	    Yes	        Yes	    Co-producer
1985	Joey	                        Yes	        Yes	    Co-producer
1987	Hollywood-Monster	            Yes	        Yes	    Yes
1990	Moon 44	                        Yes	        Story	Yes
1992	Universal Soldier	            Yes	        No	    No
1994	Stargate	                    Yes	        Yes	    No
1996	Independence Day	            Yes	        Yes	    Executive
1998	Godzilla	                    Yes	        Yes	    Executive
2000	The Patriot	                    Yes	        No	    Executive
2004	The Day After Tomorrow          Yes	        Yes	    Yes
2008	10,000 BC	                    Yes	        Yes	    Yes
2009	2012	                        Yes	        Yes	    Executive
2011	Anonymous	                    Yes	        No	    Yes
2013	White House Down	            Yes	        No	    Yes
2015	Stonewall	                    Yes	        No	    Yes
2016	Independence Day: Resurgence	Yes	        Yes	    Yes
2019	Midway	                        Yes	        No	    Yes
2022	Moonfall	                    Yes	        Yes	    Yes

[https://en.wikipedia.org/wiki/Roland_Emmerich]

...

[https://www.youtube.com/watch?v=nXLkuXX88w8]

...

[Project 14 Requirements due November 4th]

1. Project [14] 

Communicating on the Web

For this project, you will be adding something we’ve studied this week to your personal web page. 
This makes the code yours, and can be an example of your knowledge. There doesn’t necessarily have to 
be a purpose for what you choose to add; in some ways you simply want to show off your skills to a 
potential employer. Choose from:

Leaflet

Asynchronous functions
Collect form information in json format

Google Maps

Whatever you choose, be sure to have clear comments in your code so a reviewer can understand what you did, 
and also so you can go back a month or more later and be reminded of what your thought process was.
When finished, submit your code!

Submission steps:

Before you click on "Mark as Completed":

You need to do one of the following: either upload all of your files to Codio or deploy a GitHub Page for this project.
Also, if you mark this project as complete but any of the boxes are blank, your TA will be unable to grade your project.

Codio upload:

Make sure all of your project code has been uploaded to Codio.
If you did not write your code in Codio, you will need to import all of the required files into your workspace file tree.
You can do this by going to File => Upload Files, and either manually importing each file, or dragging and dropping your project folder.
Please refer to this video if you are unsure of what to do.

GitHub Pages:

If you would rather upload your project to GitHub, please make sure to have the project deployed as a GitHub page so we can thoroughly test it.
If you are unsure of how to do this, please follow these instructions.
It is important to understand you will need to make a separate repository for every project. You cannot deploy 
multiple pages from the same repository, even with different branches.
Also, no matter whether you uploaded your files from your computer or not, make sure to thoroughly test your code! 
This only takes a few minutes, but will prevent the amount of resubmissions because you missed something.

[Project 14 Requirements due November 4th]

...

[https://www.youtube.com/watch?v=nXLkuXX88w8]

[communicating-on-the-web--lesson-2-3---sat---oct-28]

[https://www.youtube.com/watch?v=D1kEtVJrmk0&t=329s]

[https://www.youtube.com/watch?v=1xt13dn74wc]

[https://www.grants.gov/web/grants]

[https://www.youtube.com/watch?v=1xt13dn74wc]

...

Kenneth Larot Yamat

"This Is Just To Say Something About The Young Housewife" (2023)

I totally ate all of the  so many    fried turkeys
that were hanging out
by the red wheelbarrow
you know     the one glazed with
soy sauce and beside the 
                      kentucky fried 
                             kung pao chickens
           which 
themselves were drenched in
              tabasco sauce

I request neither forgiveness
nor do I intend to apologize for
          my actions 

because 

I spent several hours
of quality time
with a certain young housewife

                    who

braless and dressed in negligee 

          and 

whose wild hair suggested
she spent even more additional
even higher quality time with
both the ice man
and the fish man

       either sequentially 
               or 
              simultaneously 
                     neither would surprise me

left me    breathless    exhausted
as well as      famished

I thought I gave a good
account of myself

but then along came 
          the milkman
and    she             still
   had enough energy 
       for 
    round four

I was there
I saw it all

...

[Reflections]

I accidentially closed my browser, and now my progress has been lost. 
I was at a stopping point, so, I didn't lose any actual work, I just lost 
my place. It's kind of like, when reading, and the book falls to the ground,
or the book is accidentially shut, and so, you know, the last place is lost.

I'm about to take a nap, I have class later today at 11 AM. For javascript,
I really do think that I have to start from the very beginning, again.

[End Reflections]

...

[https://www.msn.com/en-us/money/savingandinvesting/has-the-s-p-500-s-recent-correction-triggered-a-new-bear-market/ar-AA1j95Yc?ocid=NL_ENUS_A1_00010101_1_1]

[https://www.youtube.com/watch?v=lsuY5dYxOCs]

[https://www.youtube.com/watch?v=xu-t3tqDyAY]

[https://www.youtube.com/watch?v=geclsIbWqoA]

[https://www.youtube.com/watch?v=rhlM0rhl7Mk]

[https://www.youtube.com/watch?v=gq-4vIIJO30]

...

[https://leafletjs.com/index.html]

Goals

By the end of this lesson you will:
Know how to work with Leaflet
Implement a solution with maps using Leaflet
Practice knowledge in Javascript

Introduction

Leaflet is a powerful tool for developing maps. The programming language used to develop Leaflet is 
JavaScript, whereby it is easy to learn and use. Leaflet is designed with simplicity, performance and 
usability in mind. It works efficiently across all major desktop and mobile platforms.

...

2. What is Leaflet?

Leaflet is an open-source JavaScript library for interactive maps. It has all the mapping features most 
developers need. It is compatible with mobile platforms and all major desktops. It has a beautiful, 
easy to use and well-documented API.
In this link you can see all documentation of the APIs available in this library.
Preparing your page
Write the basic HTML code for a webpage or copy and paste in the following code in your editor:

...

Which of the following is the goal of step 3 found above?


[A]It is required for basic HTML.


[B] [x] With this integration you can use all Leaflet methods.


[C]It describes the version of Leaflet.

...

<!DOCTYPE html>
<html lang="en">

<head>
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.3/dist/leaflet.css"
integrity="sha256-kLaT2GOSpHechhsozzB+flnD+zUyjE2LlfWPgU04xyI="
crossorigin=""/>
<script src="https://unpkg.com/leaflet@1.9.3/dist/leaflet.js"
integrity="sha256-WBkoXOwTeyKclOHuWtc+i2uENFpDZ9YPdf5Hf+D7ewM="
crossorigin="">
</script>

    <title>Hello Leaflet</title>

</head>

<body>

    <div id="map" style="width: 600px; height: 400px;"></div>
<script>

        const map = L.map('map').setView([40.689, //latitude
            -74.044], //longitude
            13);    //zoom

        const tiles = L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
            attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
        }).addTo(map);


</script>

</body>

</html>

...

In the previous code we set up the coordinates of the “Statue of liberty” monument. We suggest that you use the page 
[https://www.latlong.net/] for searching the latitude and longitude of a place.
Exercise 2:
Search the coordinates of Niagara falls, put in your code and refresh your navigator.
Answer:
It looks like this:

...

<!DOCTYPE html>
<html lang="en">

<head>
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.3/dist/leaflet.css"
integrity="sha256-kLaT2GOSpHechhsozzB+flnD+zUyjE2LlfWPgU04xyI="
crossorigin=""/>
<script src="https://unpkg.com/leaflet@1.9.3/dist/leaflet.js"
integrity="sha256-WBkoXOwTeyKclOHuWtc+i2uENFpDZ9YPdf5Hf+D7ewM="
crossorigin="">
</script>

    <title>Hello Leaflet</title>

</head>

<body>

<div id="map" style="width: 600px; height: 400px;"></div>
<script>

        const map = L.map('map').setView([40.689, //latitude
            -74.044], //longitude
            13);    //zoom

        const tiles = L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
            attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
        }).addTo(map);


</script>

<div id="map2" style="width: 600px; height: 400px;"></div>
<script>

        const map2 = L.map2('map2').setView([43.096214, //latitude
            -79.037743], //longitude
            13);    //zoom

        const tiles = L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
            attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
        }).addTo(map2);


</script>



</body>

...

<!DOCTYPE html>
<html lang="en">

<head>
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.3/dist/leaflet.css"
integrity="sha256-kLaT2GOSpHechhsozzB+flnD+zUyjE2LlfWPgU04xyI="
crossorigin=""/>
<script src="https://unpkg.com/leaflet@1.9.3/dist/leaflet.js"
integrity="sha256-WBkoXOwTeyKclOHuWtc+i2uENFpDZ9YPdf5Hf+D7ewM="
crossorigin="">
</script>

    <title>Hello Leaflet</title>

</head>

<body>

<div id="map" style="width: 600px; height: 400px;"></div>
<script>

        const map = L.map('map').setView([40.689, //latitude
            -74.044], //longitude
            13);    //zoom

        const tiles = L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
            attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
        }).addTo(map);


</script>

<div id="mapTwo" style="width: 600px; height: 400px;"></div>
<script>

        const mapTwo = L.mapTwo('mapTwo').setView([43.096214, //latitude
            -79.037743], //longitude
            13);    //zoom

        const tiles = L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
            attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
        }).addTo(mapTwo);


</script>



</body>

</html>

...

adding a second map doesn't seem to work, I don't know how to set that up.

...

This still doesn't work.

...

<!DOCTYPE html>
<html lang="en">
<head>
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.3/dist/leaflet.css"
integrity="sha256-kLaT2GOSpHechhsozzB+flnD+zUyjE2LlfWPgU04xyI="
crossorigin=""/>
<script src="https://unpkg.com/leaflet@1.9.3/dist/leaflet.js"
integrity="sha256-WBkoXOwTeyKclOHuWtc+i2uENFpDZ9YPdf5Hf+D7ewM="
crossorigin=""></script>
<title>Hello Leaflet</title>
</head>

<body>

<div id="map" style="width: 600px; height: 400px;"></div>
<script>

        const map = L.map('map').setView([40.689, //latitude
            -74.044], //longitude
            13);    //zoom

        const tiles = L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
            attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
        }).addTo(map);


</script>

<div id="mapTwo" style="width: 600px; height: 400px;"></div>
<script>

        const mapTwo = L.mapTwo('mapTwo').setView([43.096214, //latitude
            -79.037743], //longitude
            13);    //zoom

        const tilesTwo = L.tilesTwoLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
            attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
        }).addTo(mapTwo);


</script>



</body>

</html>

...

<div id="mapTwo" style="width: 600px; height: 400px;"></div>
<script>

        const mapTwo = L.mapTwo('mapTwo').setView([43.096214, //latitude
            -79.037743], //longitude
            13);    //zoom

        const tilesTwo = L.tilesTwoLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
            attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
        }).addTo(mapTwo);


</script>

...

the above doesn't work.

...

<!DOCTYPE html>
<html lang="en">
<head>
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.3/dist/leaflet.css"
integrity="sha256-kLaT2GOSpHechhsozzB+flnD+zUyjE2LlfWPgU04xyI="
crossorigin=""/>
<script src="https://unpkg.com/leaflet@1.9.3/dist/leaflet.js"
integrity="sha256-WBkoXOwTeyKclOHuWtc+i2uENFpDZ9YPdf5Hf+D7ewM="
crossorigin=""></script>
<title>Hello Leaflet</title>
</head>

<body>

<div id="map" style="width: 600px; height: 400px;"></div>

<script>

        const map = L.map('map').setView([43.096214, //latitude
            -79.037743], //longitude
            13);    //zoom

        L.tileLayer('http://{s}.google.com/vt/lyrs=m&x={x}&y={y}&z={z}', {
            maxZoom: 20,
            subdomains: ['mt0', 'mt1', 'mt2', 'mt3'],
            attribution: 'Copyright Google Maps'
            }).addTo(map);

    </script>





</body>

</html>

...

<!DOCTYPE html>
<html lang="en">
<head>
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.3/dist/leaflet.css"
integrity="sha256-kLaT2GOSpHechhsozzB+flnD+zUyjE2LlfWPgU04xyI="
crossorigin=""/>
<script src="https://unpkg.com/leaflet@1.9.3/dist/leaflet.js"
integrity="sha256-WBkoXOwTeyKclOHuWtc+i2uENFpDZ9YPdf5Hf+D7ewM="
crossorigin=""></script>
<title>Hello Leaflet</title>
</head>

<body>

<div id="map" style="width: 600px; height: 400px;"></div>

<script>

        const map = L.map('map').setView([43.096214, //latitude
            -79.037743], //longitude
            13);    //zoom

        L.tileLayer('http://{s}.google.com/vt/lyrs=m&x={x}&y={y}&z={z}', {
            maxZoom: 20,
            subdomains: ['mt0', 'mt1', 'mt2', 'mt3'],
            attribution: 'Copyright Google Maps'
            }).addTo(map);

    </script>





</body>

</html>

...

<!DOCTYPE html>
<html lang="en">
<head>
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.3/dist/leaflet.css"
integrity="sha256-kLaT2GOSpHechhsozzB+flnD+zUyjE2LlfWPgU04xyI="
crossorigin=""/>
<script src="https://unpkg.com/leaflet@1.9.3/dist/leaflet.js"
integrity="sha256-WBkoXOwTeyKclOHuWtc+i2uENFpDZ9YPdf5Hf+D7ewM="
crossorigin=""></script>
<title>Hello Leaflet</title>
</head>

<body>

<div id="map" style="width: 600px; height: 400px;"></div>

<script>

        const map = L.map('map').setView([43.096214, //latitude
            -79.037743], //longitude
            13);    //zoom

        const tiles = L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
            attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
        }).addTo(map);


</script>





</body>

</html>

...

<!DOCTYPE html>
<html lang="en">
<head>
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.3/dist/leaflet.css"
integrity="sha256-kLaT2GOSpHechhsozzB+flnD+zUyjE2LlfWPgU04xyI="
crossorigin=""/>
<script src="https://unpkg.com/leaflet@1.9.3/dist/leaflet.js"
integrity="sha256-WBkoXOwTeyKclOHuWtc+i2uENFpDZ9YPdf5Hf+D7ewM="
crossorigin=""></script>
<title>Hello Leaflet</title>
</head>

<body>

<div id="map" style="width: 600px; height: 400px;"></div>

<script>

        const map = L.map('map').setView([43.096214, //latitude
            -79.037743], //longitude
            13);    //zoom

        L.tileLayer('http://{s}.google.com/vt/lyrs=m&x={x}&y={y}&z={z}', {
            maxZoom: 20,
            subdomains: ['mt0', 'mt1', 'mt2', 'mt3'],
            attribution: 'Copyright Google Maps'
            }).addTo(map);

    </script>

<!-- Most tile providers such as OpenStreetMap and Google Maps require an attribution, 
please check the copyright notice of the tiles provider before publishing your page 
in production. -->



</body>

</html>

...

<!DOCTYPE html>
<html lang="en">
<head>
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.3/dist/leaflet.css"
integrity="sha256-kLaT2GOSpHechhsozzB+flnD+zUyjE2LlfWPgU04xyI="
crossorigin=""/>
<script src="https://unpkg.com/leaflet@1.9.3/dist/leaflet.js"
integrity="sha256-WBkoXOwTeyKclOHuWtc+i2uENFpDZ9YPdf5Hf+D7ewM="
crossorigin=""></script>
<title>Hello Leaflet</title>
</head>

<body>

<div id="map" style="width: 600px; height: 400px;"></div>

<script>

        const map = L.map('map').setView([43.096214, //latitude
            -79.037743], //longitude
            13);    //zoom

        L.tileLayer('http://{s}.google.com/vt/lyrs=m&x={x}&y={y}&z={z}', {
            maxZoom: 20,
            subdomains: ['mt0', 'mt1', 'mt2', 'mt3'],
            attribution: 'Copyright Google Maps'
            }).addTo(map);

    var marker = L.marker([43.096214, -79.037743]).addTo(map);
    var circle = L.circle([43.08, -79.08], {radius: 600}).addTo(map);
    </script>

<!-- Most tile providers such as OpenStreetMap and Google Maps require an attribution, 
please check the copyright notice of the tiles provider before publishing your page 
in production. -->



</body>

</html>

...

<!DOCTYPE html>
<html lang="en">
<head>
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.3/dist/leaflet.css"
integrity="sha256-kLaT2GOSpHechhsozzB+flnD+zUyjE2LlfWPgU04xyI="
crossorigin=""/>
<script src="https://unpkg.com/leaflet@1.9.3/dist/leaflet.js"
integrity="sha256-WBkoXOwTeyKclOHuWtc+i2uENFpDZ9YPdf5Hf+D7ewM="
crossorigin=""></script>
<title>Hello Leaflet</title>
</head>

<body>

<div id="map" style="width: 600px; height: 400px;"></div>

<script>

        const map = L.map('map').setView([43.096214, //latitude
            -79.037743], //longitude
            13);    //zoom

        const tiles = L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
            attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
        }).addTo(map);

var marker = L.marker([43.096214, -79.037743]).addTo(map);
var circle = L.circle([43.08, -79.08], {radius: 600}).addTo(map);
</script>

<!-- 
Coordinates:
[43.09, -79.07]
[43.08, -79.06]
[43.1, -79.05]
Options:
Color: orange
fillOpacity: 0.8
weight: 6
Your map should now look like the one below.
 -->
<!-- 
[43.09, -79.07]
[43.08, -79.06]
[43.1, -79.05] 
-->



<!-- https://leafletjs.com/reference.html#polygon -->
<!-- Most tile providers such as OpenStreetMap and Google Maps require an attribution, 
please check the copyright notice of the tiles provider before publishing your page 
in production. -->



</body>

</html>

...

<!DOCTYPE html>
<html lang="en">
<head>
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.3/dist/leaflet.css"
integrity="sha256-kLaT2GOSpHechhsozzB+flnD+zUyjE2LlfWPgU04xyI="
crossorigin=""/>
<script src="https://unpkg.com/leaflet@1.9.3/dist/leaflet.js"
integrity="sha256-WBkoXOwTeyKclOHuWtc+i2uENFpDZ9YPdf5Hf+D7ewM="
crossorigin=""></script>
<title>Hello Leaflet</title>
</head>

<body>

<div id="map" style="width: 600px; height: 400px;"></div>

<script>

        const map = L.map('map').setView([43.096214, //latitude
            -79.037743], //longitude
            13);    //zoom

        const tiles = L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
            attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
        }).addTo(map);

var marker = L.marker([43.096214, -79.037743]).addTo(map);
var circle = L.circle([43.08, -79.08], {radius: 600}).addTo(map);

var latlngs = [[43.09, -79.07],[43.08, -79.06],[43.1, -79.05]];

var polygon = L.polygon(latlngs, {color: 'orange', weight:6, fillOpacity: .8}).addTo(map);




  var popup = L.popup()
           .setLatLng([43.1123, -79.01])
           .setContent("The last time we ever crossed paths.")
           .openOn(map); 

           

</script>

<!-- polygon.bindPopup("She's hanging out at her favorite restaurants").openPopup(); -->
<!-- circle.bindPopup("<b>Where's that crazy girl?</b>").openPopup(); -->
<!-- marker.bindPopup("Your Favorite Place").openPopup(); -->

<!-- 
  var popup = L.popup()
           .setLatLng([43.1123, -79.01])
           .setContent("The last time we ever crossed paths.")
           .openOn(map); 
           
           -->

<!-- [working area]

marker.bindPopup("Testing a popup.").openPopup();
circle.bindPopup("<b>Testing!</b>I am a circle.");
polygon.bindPopup("Testing a polygon.");

[working area] -->

<!-- 
  
  Sometimes you need to attach information in your map. With the next code you can add easily a popup:
var popup = L.popup()
           .setLatLng([43.1123, -79.01])
           .setContent("Testing a popup.")
           .openOn(map);
It looks like this:

 -->

<!-- 
  
  We also can add a popup to our objects as makers, polygons, circles, etc. Add the following code to your page.
marker.bindPopup("Testing a popup.").openPopup();
circle.bindPopup("<b>Testing!</b>I am a circle.");
polygon.bindPopup("Testing a polygon.");
Refresh your page and try clicking on our objects. The popup appears when you click on the object and with method openPopup() you can see the popup immediately open the page (for makers only). See below.

 -->

<!-- weight	Number	3	Stroke width in pixels -->

<!-- fillOpacity	Number	0.2	Fill opacity. -->

<!-- 
I was missing brackets around the bracketed co-ordinates on the latlngs line

Reference:  Eliot Woidyla
            var latlngs = [[43.09, -79.07],[43.08, -79.06],[43.1, -79.05]];
            var polygon = L.polygon(latlngs, {color: 'orange', fillOpacity: 0.8, weight: 6}).addTo(map);

 -->

<!-- https://leafletjs.com/reference.html#polygon -->
<!-- 

var latlngs = [43.09, -79.07],[43.08, -79.06],[43.1, -79.05],];

var polygon = L.polygon(latlngs, {color: 'orange'}).addTo(map); 


 -->

<!-- that didn't work -->
<!-- var latlngs = [43.09, -79.07],[43.08, -79.06],[43.1, -79.05],];

var polygon = L.polygon(latlngs, {color: 'orange'}).addTo(map);  -->
<!-- [work area]

var latlngs = [43.09, -79.07],[43.08, -79.06],[43.1, -79.05],];

var polygon = L.polygon(latlngs, {color: 'orange'}).addTo(map); 

[work area] --> 

<!-- weight	Number	3	Stroke width in pixels -->

<!-- fillOpacity	Number	0.2	Fill opacity. -->

<!-- https://leafletjs.com/reference.html#polygon -->

<!-- [43.09, -79.07]
[43.08, -79.06]
[43.1, -79.05] -->


<!-- https://leafletjs.com/reference.html#polygon -->

<!-- 
  Leaflet was created 11 years ago by Volodymyr Agafonkin, a Ukrainian citizen living in Kyiv.

Russian bombs are now falling over Volodymyr’s hometown. His family, his friends, his neighbours, thousands and thousands of absolutely wonderful people, are either seeking refuge or fighting for their lives.

The Russian soldiers have already killed tens of thousands of civilians, including women and children, and are committing mass war crimes like gang rapes, executions, looting, and targeted bombings of civilian shelters and places of cultural significance. The death toll keeps rising, and Ukraine needs your help.

As Volodymyr expressed a few days before the invasion:

If you want to help, educate yourself and others on the Russian threat, follow reputable journalists, demand severe Russian sanctions and Ukrainian support from your leaders, protest war, reach out to Ukrainian friends, donate to Ukrainian charities. Just don’t be silent.

Ukrainians are recommending the Come Back Alive charity. For other options, see StandWithUkraine.

If an appeal to humanity doesn’t work for you, I’ll appeal to your egoism: the future of Ukrainian citizens is the future of Leaflet.

It is chilling to see Leaflet being used for documenting Russia’s war crimes, factual reporting of the war and for coordination of humanitarian efforts in Romania and in Poland. We commend these uses of Leaflet.

If you support the actions of the Russian government (even after reading all this), do everyone else a favour and carry some seeds in your pocket.

Yours truly,
Leaflet maintainers.
 -->

<!-- 
Coordinates:
[43.09, -79.07]
[43.08, -79.06]
[43.1, -79.05]
Options:
Color: orange
fillOpacity: 0.8
weight: 6
Your map should now look like the one below.
 -->
<!-- 
[43.09, -79.07]
[43.08, -79.06]
[43.1, -79.05] 
-->



<!-- https://leafletjs.com/reference.html#polygon -->
<!-- Most tile providers such as OpenStreetMap and Google Maps require an attribution, 
please check the copyright notice of the tiles provider before publishing your page 
in production. -->



</body>

</html>

...

<!DOCTYPE html>
<html lang="en">
<head>
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.3/dist/leaflet.css"
integrity="sha256-kLaT2GOSpHechhsozzB+flnD+zUyjE2LlfWPgU04xyI="
crossorigin=""/>
<script src="https://unpkg.com/leaflet@1.9.3/dist/leaflet.js"
integrity="sha256-WBkoXOwTeyKclOHuWtc+i2uENFpDZ9YPdf5Hf+D7ewM="
crossorigin=""></script>
<title>Hello Leaflet</title>
</head>

<body>

<div id="map" style="width: 600px; height: 400px;"></div>

<script>

        const map = L.map('map').setView([43.096214, //latitude
            -79.037743], //longitude
            13);    //zoom

        const tiles = L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
            attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
        }).addTo(map);

var marker = L.marker([43.096214, -79.037743]).addTo(map);
var circle = L.circle([43.08, -79.08], {radius: 600}).addTo(map);

var latlngs = [[43.09, -79.07],[43.08, -79.06],[43.1, -79.05]];

var polygon = L.polygon(latlngs, {color: 'orange', weight:6, fillOpacity: .8}).addTo(map);




var popup = L.popup()
.setLatLng([43.1123, -79.01])
.setContent("The last time we ever crossed paths.")
.openOn(map); 

function onMapClick(e) {
alert("You clicked the map at " + e.latlng);
}

map.on('click', onMapClick);

           

</script>

<!-- 
  
  7. Conclusion & Takeaways
map: used to create a map on a page and manipulate it
tileLayer: used to load and display tile layers on the map
Marker: used to display clickable/draggable icons on the map
Polygon: A class for drawing polygon overlays on a map
Circle: A class for drawing circle overlays on a map
Leaflet allows easy interaction with and manipulation of maps.
The documentation is very complete.
With knowledge in JavaScript and Leaflet you can create big projects.
Attribution
Quick Start Guide - Leaflet - a JavaScript library for interactive maps. (n.d.). [Video]. https://leafletjs.com/examples/quick-start/


 -->

<!-- 6. Dealing with events
You can interact with the map using events (see documentation for details).
Every object has its corresponding event which can be used as a function. It allows you to react to user interaction. For example:
function onMapClick(e) {
        alert("You clicked the map at " + e.latlng);
}

map.on('click', onMapClick);
With this code, you can click anywhere on the map to view the coordinates of that point. It will show an alert like the one below:
alert image
Try to click on your page and see the alerts. -->

<!-- 

  You can interact with the map using events (see documentation for details).
Every object has its corresponding event which can be used as a function. It allows you to react to user interaction. For example:
function onMapClick(e) {
        alert("You clicked the map at " + e.latlng);
}

map.on('click', onMapClick);
With this code, you can click anywhere on the map to view the coordinates of that point. It will show an alert like the one below:
alert image
Try to click on your page and see the alerts.

 -->

<!-- polygon.bindPopup("She's hanging out at her favorite restaurants").openPopup(); -->
<!-- circle.bindPopup("<b>Where's that crazy girl?</b>").openPopup(); -->
<!-- marker.bindPopup("Your Favorite Place").openPopup(); -->

<!-- 
  var popup = L.popup()
           .setLatLng([43.1123, -79.01])
           .setContent("The last time we ever crossed paths.")
           .openOn(map); 
           
           -->

<!-- [working area]

marker.bindPopup("Testing a popup.").openPopup();
circle.bindPopup("<b>Testing!</b>I am a circle.");
polygon.bindPopup("Testing a polygon.");

[working area] -->

<!-- 
  
  Sometimes you need to attach information in your map. With the next code you can add easily a popup:
var popup = L.popup()
           .setLatLng([43.1123, -79.01])
           .setContent("Testing a popup.")
           .openOn(map);
It looks like this:

 -->

<!-- 
  
  We also can add a popup to our objects as makers, polygons, circles, etc. Add the following code to your page.
marker.bindPopup("Testing a popup.").openPopup();
circle.bindPopup("<b>Testing!</b>I am a circle.");
polygon.bindPopup("Testing a polygon.");
Refresh your page and try clicking on our objects. The popup appears when you click on the object and with method openPopup() you can see the popup immediately open the page (for makers only). See below.

 -->

<!-- weight	Number	3	Stroke width in pixels -->

<!-- fillOpacity	Number	0.2	Fill opacity. -->

<!-- 
I was missing brackets around the bracketed co-ordinates on the latlngs line

Reference:  Eliot Woidyla
            var latlngs = [[43.09, -79.07],[43.08, -79.06],[43.1, -79.05]];
            var polygon = L.polygon(latlngs, {color: 'orange', fillOpacity: 0.8, weight: 6}).addTo(map);

 -->

<!-- https://leafletjs.com/reference.html#polygon -->
<!-- 

var latlngs = [43.09, -79.07],[43.08, -79.06],[43.1, -79.05],];

var polygon = L.polygon(latlngs, {color: 'orange'}).addTo(map); 


 -->

<!-- that didn't work -->
<!-- var latlngs = [43.09, -79.07],[43.08, -79.06],[43.1, -79.05],];

var polygon = L.polygon(latlngs, {color: 'orange'}).addTo(map);  -->
<!-- [work area]

var latlngs = [43.09, -79.07],[43.08, -79.06],[43.1, -79.05],];

var polygon = L.polygon(latlngs, {color: 'orange'}).addTo(map); 

[work area] --> 

<!-- weight	Number	3	Stroke width in pixels -->

<!-- fillOpacity	Number	0.2	Fill opacity. -->

<!-- https://leafletjs.com/reference.html#polygon -->

<!-- [43.09, -79.07]
[43.08, -79.06]
[43.1, -79.05] -->


<!-- https://leafletjs.com/reference.html#polygon -->

<!-- 
  Leaflet was created 11 years ago by Volodymyr Agafonkin, a Ukrainian citizen living in Kyiv.

Russian bombs are now falling over Volodymyr’s hometown. His family, his friends, his neighbours, thousands and thousands of absolutely wonderful people, are either seeking refuge or fighting for their lives.

The Russian soldiers have already killed tens of thousands of civilians, including women and children, and are committing mass war crimes like gang rapes, executions, looting, and targeted bombings of civilian shelters and places of cultural significance. The death toll keeps rising, and Ukraine needs your help.

As Volodymyr expressed a few days before the invasion:

If you want to help, educate yourself and others on the Russian threat, follow reputable journalists, demand severe Russian sanctions and Ukrainian support from your leaders, protest war, reach out to Ukrainian friends, donate to Ukrainian charities. Just don’t be silent.

Ukrainians are recommending the Come Back Alive charity. For other options, see StandWithUkraine.

If an appeal to humanity doesn’t work for you, I’ll appeal to your egoism: the future of Ukrainian citizens is the future of Leaflet.

It is chilling to see Leaflet being used for documenting Russia’s war crimes, factual reporting of the war and for coordination of humanitarian efforts in Romania and in Poland. We commend these uses of Leaflet.

If you support the actions of the Russian government (even after reading all this), do everyone else a favour and carry some seeds in your pocket.

Yours truly,
Leaflet maintainers.
 -->

<!-- 
Coordinates:
[43.09, -79.07]
[43.08, -79.06]
[43.1, -79.05]
Options:
Color: orange
fillOpacity: 0.8
weight: 6
Your map should now look like the one below.
 -->
<!-- 
[43.09, -79.07]
[43.08, -79.06]
[43.1, -79.05] 
-->



<!-- https://leafletjs.com/reference.html#polygon -->
<!-- Most tile providers such as OpenStreetMap and Google Maps require an attribution, 
please check the copyright notice of the tiles provider before publishing your page 
in production. -->



</body>

</html>

...

[ End Lesson communicating-on-the-web--lesson-2-3---sat---oct-28 ]

...




