2. What is a JSON file?
JSON (JavaScript Object Notation) is a file format that is easily readable for a human and requires less formatting. 
It is used for sharing or transmitting data to store. The extension of this type of file is .JSON and it is supported 
by many modern programming languages.
The media type used for JSON is application/json.
JSON File Structure
JSON is structured with key and value pairs. The key is unique and is a string surrounded by double quotation marks. 
The Value can be a Number, string (surrounded by double quotation marks), Array, Boolean, null and object. The key and 
value are separated by a colon(:) in the middle with the key on the left and the value on the right. Different key/value 
pairs are separated by a comma(,).

...

Examples by types values:
Number
{"age" : 34}
String
{"name" : "Joseph"}
Array
{"fruits" : ["Apple","Banana","Strawberry"]}
Boolean
{"Enable" : true}
Null
{"genre" : null}
Object
{"user" : {"name" : "Joseph", "age" : 34, "genre" : null}}

...

Resources:          [https://www.youtube.com/watch?v=nXLkuXX88w8]
                    [https://www.geeksforgeeks.org/json-data-types/]
                    [https://docs.fileformat.com/web/json/]


...

Christopher	7464839	+1457938740	Read, Sing, Dance	Name:HTML, ID:1; Name:Javascript, ID:2; Name:API; ID:3

...

Exercise 3
Build a JSON file for the data below (hint: think of this as a user object).
Name	        Id	            Telephone number	    Hobbies	            Lessons
Christopher	    7464839	    +1457938740	            Read, Sing, Dance	Name:HTML, ID:1; Name:Javascript, ID:2; Name:API; ID:3

...

{"user" : {"name" : "Joseph", "age" : 34, "genre" : null}}

{"Name" : "Christopher", "Id" : 7464839, "TelephoneNumber" : +1457938740, "Hobbies" : ["Read, Sing, Dance"], 
"Lessons" [{"Name":"HTML", "ID":1}{"Name":"Javascript", "ID":2 }{"Name":"API", "ID":3}] }

...

oct28lesson2-1

...

1. Accessing APIs with Fetch
javascript fetch api
Goals
By the end of this lesson you will:
Know how to work with the fetch method
Be able to get data using the fetch method
Be able to execute a public free API
Introduction
The fetch() method easily connects the server to the client. You need only type the URL of the API and a second 
parameter for POST requests. With the fetch() method you can execute an API (if you have access) and begin to 
interact a little more with APIs to see an API in action. Also, the fetch() method allows you to get data and show it on your page.

...

[Resources] 

[https://youtu.be/nXLkuXX88w8?t=1461]

...

what happened, well. I attended class, on saturday, but I was still working on project 13 on Saturday. I could have 
completed this stuff that day, and in retrospect, I should have just done this stuff on Saturday.

I'm going to take a short break.

...

2. fetch() Method in Javascript
fetch diagram
fetch() Method in Javascript
The fetch() method is used to request data from a server for any type of API that returns the data in JSON or XML format.
Syntax
fetch('url')
  .then(response => response.json())
  .then(data => console.log(data));
The fetch() method requires one parameter: the URL to request. It accepts two parameters and returns a promise. The second 
parameter is an array of properties.
For the next example we will use a free API found here.

[Resources]             [https://apipheny.io/free-api/#apis-without-key]

...

<!DOCTYPE html>
<html lang="en">
<head>
 <meta charset="UTF-8">
 <meta name="viewport" content="width=device-width, initial-scale=1.0">
 <title>C1 | JavaScript | fetch() Method</title>
</head>
<body>
 <script src="/.guides/console.js"> </script>
    <script>
        let result = fetch("https://www.boredapi.com/api/activity");
        result.then(res => res.json())
              .then(d => { console.log(d)});
    </script>
</body>
</html>

...

The return value is a promise whether it is resolved or not. The return data can be of the format JSON or XML. 
It can be an array of objects or simply a single object.

...

[How many parameters are accepted? And What value is required?]

2 parameter's are accepted, The first parameter is required is a URL, and the second parameter is optional.

...

<!-- Fetching data with options: -->
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>C1 | JavaScript | fetch() Method with Options</title>
</head>

<body>
    <script>
        user = {
            "name": "Christopher Miller",
            "age": "35",
            "salary": "4321"
        };
        let options = {
            method: 'POST',
            headers: {
                'Content-Type':'application/json;charset=utf-8'
            },
            body: JSON.stringify(user)
        };
        // Rest API example
        let result = fetch("https://dummy.restapiexample.com/api/v1/create", options);
        result.then(res => res.json())
              .then(d => {console.log(d)});
    </script>
</body>

</html>

...

    <script>
        user = {
            "name": "Christopher Miller",
            "age": "35",
            "salary": "4321"
        };
        let options = {
            method: 'POST',
            headers: {
                'Content-Type':'application/json;charset=utf-8'
            },
            body: JSON.stringify(user)
        };
        // Rest API example
        let result = fetch("https://dummy.restapiexample.com/api/v1/create", options);
        result.then(res => res.json())
              .then(d => {console.log(d)});
    </script>

...

{"status":"success","data":{"name":"Christopher Miller","age":"35","salary":"4321","id":7993},"message":"Successfully! Record has been added."}

...

<!DOCTYPE html>
<html lang="en">
<head>
 <meta charset="UTF-8">
 <meta name="viewport" content="width=device-width, initial-scale=1.0">
 <title>C1 | JavaScript | fetch() Method</title>
</head>
<body>
 <script src="/.guides/console.js"> </script>
 
    <script>
        user = {
            "name": "Christopher Miller",
            "age": "35",
            "salary": "4321"
        };
        let options = {
            method: 'POST',
            headers: {
                'Content-Type':'application/json;charset=utf-8'
            },
            body: JSON.stringify(user)
        };
        // Rest API example
        let result = fetch("https://dummy.restapiexample.com/api/v1/create", options);
        result.then(res => res.json())
              .then(d => {console.log(d)});
    </script>


    
</body>
</html>

...

<!DOCTYPE html>
<html lang="en">
<head>
 <meta charset="UTF-8">
 <meta name="viewport" content="width=device-width, initial-scale=1.0">
 <title>C1 | JavaScript | fetch() Method</title>
</head>
<body>
 <script src="/.guides/console.js"> </script>
 
    <script>
        user = {
            "name": "Christopher Miller",
            "age": "35",
            "salary": "4321"
        };
        let options = {
            method: 'POST',
            headers: {
                'Content-Type':'application/json;charset=utf-8'
            },
            body: JSON.stringify(user)
        };
        // Rest API example
        let result = fetch("https://dummy.restapiexample.com/api/v1/create", options);
        result.then(res => res.json())
              .then(d => {console.log(d)});
    </script>


    
</body>
</html>

...

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>C1 | JavaScript | fetch() Method Exercise</title>
</head>

<body>
    <script>
        //Completed code here
    </script>
    <img id="imageAPI" width="500" height="600">
</body>

</html>

...

<!-- myDogImg = document.getElementbyID("imageAPI").src -->
<!-- result or response check difference in javascript -->
<!-- https://dog.ceo/api/breeds/image/random -->
<!-- src="  " -->
<!-- https://dog.ceo/api/breeds/image/random -->

...

[Final Working Version]

<!DOCTYPE html>
<html lang="en">

<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>C1 | JavaScript | fetch() Method Exercise</title>
</head>

<body>
<script>
//Completed code here



let result = fetch("https://dog.ceo/api/breeds/image/random");
result.then(res => res.json())
.then(d => {document.getElementById("imageAPI").src=d.message});
</script>


<img id="imageAPI" width="500" height="600" >

</body>


</html>

...

[https://sabrinaprinter-groupsphere.codio.io/example.html]

...

3. Conclusion & Takeaways
The fetch() method has two parameters, the URL of the API and a second parameter for options.
The fetch() method is very easy to use, you can try to do several tests to see it in action, there are many free APIs on the web.
Attribution
Team, A. (2022, February 19). Free API – Huge List of Public APIs For Testing [No Key]. Apipheny. https://apipheny.io/free-api/
GeeksforGeeks. (2022, October 19). JavaScript | fetch() Method. https://www.geeksforgeeks.org/javascript-fetch-method/
GeeksforGeeks. (2021a, January 8). How to use JavaScript Fetch API to Get Data ? https://www.geeksforgeeks.org/how-to-use-javascript-fetch-api-to-get-data/?ref=rp

[https://apipheny.io/free-api/]
[https://www.geeksforgeeks.org/javascript-fetch-method/]
[https://www.geeksforgeeks.org/how-to-use-javascript-fetch-api-to-get-data/?ref=rp]
[https://sabrinaprinter-groupsphere.codio.io/example.html]
[https://youtu.be/nXLkuXX88w8?t=2914]
[https://youtu.be/nXLkuXX88w8?t=3415]

...

lesson-2-2---sat---oct-28

...

[https://youtu.be/nXLkuXX88w8?t=2914]

...

lesson-2-2-sat-oct-28

...




