I've come back around to project 14 to update the map links to leaflet, to give all the pages 
a customized location. project 14 hasn't been graded yet, so I figured I would spend a little 
more time on it, plus, it is my project, and I want it to be interesting. I also Kind of need 
to get myself into work mode, since I've just been playing computer games for so many days, and 
not really doing anything else.

...

<!-- that didn't work -->
<!-- var latlngs = [43.09, -79.07],[43.08, -79.06],[43.1, -79.05],];

var polygon = L.polygon(latlngs, {color: 'orange'}).addTo(map);  -->
<!-- [work area]

var latlngs = [43.09, -79.07],[43.08, -79.06],[43.1, -79.05],];

var polygon = L.polygon(latlngs, {color: 'orange'}).addTo(map); 

[work area] --> 

<!-- weight	Number	3	Stroke width in pixels -->

<!-- fillOpacity	Number	0.2	Fill opacity. -->

<!-- https://leafletjs.com/reference.html#polygon -->

<!-- [43.09, -79.07]
[43.08, -79.06]
[43.1, -79.05] -->


<!-- https://leafletjs.com/reference.html#polygon -->

<!-- 
  Leaflet was created 11 years ago by Volodymyr Agafonkin, a Ukrainian citizen living in Kyiv.

Russian bombs are now falling over Volodymyr’s hometown. His family, his friends, his neighbours, thousands and thousands of absolutely wonderful people, are either seeking refuge or fighting for their lives.

The Russian soldiers have already killed tens of thousands of civilians, including women and children, and are committing mass war crimes like gang rapes, executions, looting, and targeted bombings of civilian shelters and places of cultural significance. The death toll keeps rising, and Ukraine needs your help.

As Volodymyr expressed a few days before the invasion:

If you want to help, educate yourself and others on the Russian threat, follow reputable journalists, demand severe Russian sanctions and Ukrainian support from your leaders, protest war, reach out to Ukrainian friends, donate to Ukrainian charities. Just don’t be silent.

Ukrainians are recommending the Come Back Alive charity. For other options, see StandWithUkraine.

If an appeal to humanity doesn’t work for you, I’ll appeal to your egoism: the future of Ukrainian citizens is the future of Leaflet.

It is chilling to see Leaflet being used for documenting Russia’s war crimes, factual reporting of the war and for coordination of humanitarian efforts in Romania and in Poland. We commend these uses of Leaflet.

If you support the actions of the Russian government (even after reading all this), do everyone else a favour and carry some seeds in your pocket.

Yours truly,
Leaflet maintainers.
 -->

<!-- 
Coordinates:
[43.09, -79.07]
[43.08, -79.06]
[43.1, -79.05]
Options:
Color: orange
fillOpacity: 0.8
weight: 6
Your map should now look like the one below.
 -->
<!-- 
[43.09, -79.07]
[43.08, -79.06]
[43.1, -79.05] 
-->



<!-- https://leafletjs.com/reference.html#polygon -->
<!-- Most tile providers such as OpenStreetMap and Google Maps require an attribution, 
please check the copyright notice of the tiles provider before publishing your page 
in production. -->

...

                //  set view latitude 
                //  [11/06/2023 05:58 AM] I'm trying to think about where I left off. checking page.
                //  [11/06/2023 01:53 AM] latitude 
                //  [11/06/2023 02:35 AM] [Development Commentary] [686/868 is called "the chestnut ratio 868/686 is called "the hazel ratio"] 
                //  [11/06/2023 05:58 AM] [Attribution] [http://www.openstreetmap.org/copyright]
                //  [11/06/2023 05:58 AM] I think I remember, I have to set up this page first, and then move on to creating the other 18 pages. 
                //  [11/06/2023 05:59 AM] <!-- [11/06/2023 03:01 AM] [Development Commentary] [686/868 is called "the chestnut ratio 868/686 is called 
                // "the hazel ratio"] [11/06/2023 03:01 AM] [Development Commentary] [686/868 is called "the chestnut ratio 868/686 is called "the hazel ratio"] 
                // [11/06/2023 01:53 AM] [11/06/2023 01:53 AM] [Development Commentary] [686/868 is called "the chestnut ratio 868/686 is called "the hazel ratio"]-->

            // longitude set view latitude 
                //zoom

...

<!-- [11/06/2023 06:09 AM] I think that this page is set up Update Names -->

<!-- 6. Dealing with events
You can interact with the map using events (see documentation for details).
Every object has its corresponding event which can be used as a function. It allows you to react to user interaction. For example:
function onMapClick(e) {
        alert("You clicked the map at " + e.latlng);
}

map.on('click', onMapClick);
With this code, you can click anywhere on the map to view the coordinates of that point. It will show an alert like the one below:
alert image
Try to click on your page and see the alerts. -->

<!-- 

  You can interact with the map using events (see documentation for details).
Every object has its corresponding event which can be used as a function. It allows you to react to user interaction. For example:
function onMapClick(e) {
        alert("You clicked the map at " + e.latlng);
}

map.on('click', onMapClick);
With this code, you can click anywhere on the map to view the coordinates of that point. It will show an alert like the one below:
alert image
Try to click on your page and see the alerts.

 -->

<!-- polygon.bindPopup("She's hanging out at her favorite restaurants").openPopup(); -->
<!-- circle.bindPopup("<b>Where's that crazy girl?</b>").openPopup(); -->
<!-- marker.bindPopup("Your Favorite Place").openPopup(); -->

<!-- 
  var popup = L.popup()
           .setLatLng([43.1123, -79.01])
           .setContent("The last time we ever crossed paths.")
           .openOn(map); 
           
           -->

<!-- [working area]

marker.bindPopup("Testing a popup.").openPopup();
circle.bindPopup("<b>Testing!</b>I am a circle.");
polygon.bindPopup("Testing a polygon.");

[working area] -->

<!-- 
  
  Sometimes you need to attach information in your map. With the next code you can add easily a popup:
var popup = L.popup()
           .setLatLng([43.1123, -79.01])
           .setContent("Testing a popup.")
           .openOn(map);
It looks like this:

 -->

<!-- 
  
  We also can add a popup to our objects as makers, polygons, circles, etc. Add the following code to your page.
marker.bindPopup("Testing a popup.").openPopup();
circle.bindPopup("<b>Testing!</b>I am a circle.");
polygon.bindPopup("Testing a polygon.");
Refresh your page and try clicking on our objects. The popup appears when you click on the object and with method openPopup() you can see the popup immediately open the page (for makers only). See below.

 -->

<!-- weight	Number	3	Stroke width in pixels -->

<!-- fillOpacity	Number	0.2	Fill opacity. -->

<!-- 
I was missing brackets around the bracketed co-ordinates on the latlngs line

Reference:  Eliot Woidyla
            var latlngs = [[43.09, -79.07],[43.08, -79.06],[43.1, -79.05]];
            var polygon = L.polygon(latlngs, {color: 'orange', fillOpacity: 0.8, weight: 6}).addTo(map);

 -->

<!-- https://leafletjs.com/reference.html#polygon -->
<!-- 

var latlngs = [43.09, -79.07],[43.08, -79.06],[43.1, -79.05],];

var polygon = L.polygon(latlngs, {color: 'orange'}).addTo(map); 


 -->

<!-- that didn't work -->
<!-- var latlngs = [43.09, -79.07],[43.08, -79.06],[43.1, -79.05],];

var polygon = L.polygon(latlngs, {color: 'orange'}).addTo(map);  -->
<!-- [work area]

var latlngs = [43.09, -79.07],[43.08, -79.06],[43.1, -79.05],];

var polygon = L.polygon(latlngs, {color: 'orange'}).addTo(map); 

[work area] --> 

<!-- weight	Number	3	Stroke width in pixels -->

<!-- fillOpacity	Number	0.2	Fill opacity. -->

<!-- https://leafletjs.com/reference.html#polygon -->

<!-- [43.09, -79.07]
[43.08, -79.06]
[43.1, -79.05] -->


<!-- https://leafletjs.com/reference.html#polygon -->

<!-- 
  Leaflet was created 11 years ago by Volodymyr Agafonkin, a Ukrainian citizen living in Kyiv.

Russian bombs are now falling over Volodymyr’s hometown. His family, his friends, his neighbours, thousands and thousands of absolutely wonderful people, are either seeking refuge or fighting for their lives.

The Russian soldiers have already killed tens of thousands of civilians, including women and children, and are committing mass war crimes like gang rapes, executions, looting, and targeted bombings of civilian shelters and places of cultural significance. The death toll keeps rising, and Ukraine needs your help.

As Volodymyr expressed a few days before the invasion:

If you want to help, educate yourself and others on the Russian threat, follow reputable journalists, demand severe Russian sanctions and Ukrainian support from your leaders, protest war, reach out to Ukrainian friends, donate to Ukrainian charities. Just don’t be silent.

Ukrainians are recommending the Come Back Alive charity. For other options, see StandWithUkraine.

If an appeal to humanity doesn’t work for you, I’ll appeal to your egoism: the future of Ukrainian citizens is the future of Leaflet.

It is chilling to see Leaflet being used for documenting Russia’s war crimes, factual reporting of the war and for coordination of humanitarian efforts in Romania and in Poland. We commend these uses of Leaflet.

If you support the actions of the Russian government (even after reading all this), do everyone else a favour and carry some seeds in your pocket.

Yours truly,
Leaflet maintainers.
 -->

<!-- 
Coordinates:
[43.09, -79.07]
[43.08, -79.06]
[43.1, -79.05]
Options:
Color: orange
fillOpacity: 0.8
weight: 6
Your map should now look like the one below.
 -->
<!-- 
[43.09, -79.07]
[43.08, -79.06]
[43.1, -79.05] 
-->



<!-- https://leafletjs.com/reference.html#polygon -->
<!-- Most tile providers such as OpenStreetMap and Google Maps require an attribution, 
please check the copyright notice of the tiles provider before publishing your page 
in production. -->

...

<!-- 
[Citations]    [http://www.openstreetmap.org/copyright]
  
  7. Conclusion & Takeaways
map: used to create a map on a page and manipulate it
tileLayer: used to load and display tile layers on the map
Marker: used to display clickable/draggable icons on the map
Polygon: A class for drawing polygon overlays on a map
Circle: A class for drawing circle overlays on a map
Leaflet allows easy interaction with and manipulation of maps.
The documentation is very complete.
With knowledge in JavaScript and Leaflet you can create big projects.
Attribution
Quick Start Guide - Leaflet - a JavaScript library for interactive maps. (n.d.). [Video]. https://leafletjs.com/examples/quick-start/


 -->

...

                //  set view latitude 
                //  [11/06/2023 05:58 AM] I'm trying to think about where I left off. checking page.
                //  [11/06/2023 01:53 AM] latitude 
                //  [11/06/2023 02:35 AM] [Development Commentary] [686/868 is called "the chestnut ratio 868/686 is called "the hazel ratio"] 
                //  [11/06/2023 05:58 AM] [Attribution] [http://www.openstreetmap.org/copyright]
                //  [11/06/2023 05:58 AM] I think I remember, I have to set up this page first, and then move on to creating the other 18 pages. 
                //  [11/06/2023 05:59 AM] <!-- [11/06/2023 03:01 AM] [Development Commentary] [686/868 is called "the chestnut ratio 868/686 is called 
                // "the hazel ratio"] [11/06/2023 03:01 AM] [Development Commentary] [686/868 is called "the chestnut ratio 868/686 is called "the hazel ratio"] 
                // [11/06/2023 01:53 AM] [11/06/2023 01:53 AM] [Development Commentary] [686/868 is called "the chestnut ratio 868/686 is called "the hazel ratio"]-->

             // longitude set view latitude 
                //zoom

<!-- href="https://en.wikipedia.org/wiki/Lana_Del_Rey" target="_self"   [11/05/2023 03:50] [11/05/2023 03:40] [11/05/2023 02:55] -->
<!-- Button works, need to update based on page -->
    <!-- Button works, need to update based on page -->

// -0.627694, -90.422974           -0.617694, -90.412974              -0.637694, -90.392974

<!-- [11/06/2023 06:09 AM] I think that this page is set up Update Names -->

<!-- 
[Citations]    [http://www.openstreetmap.org/copyright]
  
  7. Conclusion & Takeaways
map: used to create a map on a page and manipulate it
tileLayer: used to load and display tile layers on the map
Marker: used to display clickable/draggable icons on the map
Polygon: A class for drawing polygon overlays on a map
Circle: A class for drawing circle overlays on a map
Leaflet allows easy interaction with and manipulation of maps.
The documentation is very complete.
With knowledge in JavaScript and Leaflet you can create big projects.
Attribution
Quick Start Guide - Leaflet - a JavaScript library for interactive maps. (n.d.). [Video]. https://leafletjs.com/examples/quick-start/


 -->

<!-- 6. Dealing with events
You can interact with the map using events (see documentation for details).
Every object has its corresponding event which can be used as a function. It allows you to react to user interaction. For example:
function onMapClick(e) {
        alert("You clicked the map at " + e.latlng);
}

map.on('click', onMapClick);
With this code, you can click anywhere on the map to view the coordinates of that point. It will show an alert like the one below:
alert image
Try to click on your page and see the alerts. -->

<!-- 

  You can interact with the map using events (see documentation for details).
Every object has its corresponding event which can be used as a function. It allows you to react to user interaction. For example:
function onMapClick(e) {
        alert("You clicked the map at " + e.latlng);
}

map.on('click', onMapClick);
With this code, you can click anywhere on the map to view the coordinates of that point. It will show an alert like the one below:
alert image
Try to click on your page and see the alerts.

 -->

<!-- polygon.bindPopup("She's hanging out at her favorite restaurants").openPopup(); -->
<!-- circle.bindPopup("<b>Where's that crazy girl?</b>").openPopup(); -->
<!-- marker.bindPopup("Your Favorite Place").openPopup(); -->

<!-- 
  var popup = L.popup()
           .setLatLng([43.1123, -79.01])
           .setContent("The last time we ever crossed paths.")
           .openOn(map); 
           
           -->

<!-- [working area]

marker.bindPopup("Testing a popup.").openPopup();
circle.bindPopup("<b>Testing!</b>I am a circle.");
polygon.bindPopup("Testing a polygon.");

[working area] -->

<!-- 
  
  Sometimes you need to attach information in your map. With the next code you can add easily a popup:
var popup = L.popup()
           .setLatLng([43.1123, -79.01])
           .setContent("Testing a popup.")
           .openOn(map);
It looks like this:

 -->

<!-- 
  
  We also can add a popup to our objects as makers, polygons, circles, etc. Add the following code to your page.
marker.bindPopup("Testing a popup.").openPopup();
circle.bindPopup("<b>Testing!</b>I am a circle.");
polygon.bindPopup("Testing a polygon.");
Refresh your page and try clicking on our objects. The popup appears when you click on the object and with method openPopup() you can see the popup immediately open the page (for makers only). See below.

 -->

<!-- weight	Number	3	Stroke width in pixels -->

<!-- fillOpacity	Number	0.2	Fill opacity. -->

<!-- 
I was missing brackets around the bracketed co-ordinates on the latlngs line

Reference:  Eliot Woidyla
            var latlngs = [[43.09, -79.07],[43.08, -79.06],[43.1, -79.05]];
            var polygon = L.polygon(latlngs, {color: 'orange', fillOpacity: 0.8, weight: 6}).addTo(map);

 -->

<!-- https://leafletjs.com/reference.html#polygon -->
<!-- 

var latlngs = [43.09, -79.07],[43.08, -79.06],[43.1, -79.05],];

var polygon = L.polygon(latlngs, {color: 'orange'}).addTo(map); 


 -->

<!-- that didn't work -->
<!-- var latlngs = [43.09, -79.07],[43.08, -79.06],[43.1, -79.05],];

var polygon = L.polygon(latlngs, {color: 'orange'}).addTo(map);  -->
<!-- [work area]

var latlngs = [43.09, -79.07],[43.08, -79.06],[43.1, -79.05],];

var polygon = L.polygon(latlngs, {color: 'orange'}).addTo(map); 

[work area] --> 

<!-- weight	Number	3	Stroke width in pixels -->

<!-- fillOpacity	Number	0.2	Fill opacity. -->

<!-- https://leafletjs.com/reference.html#polygon -->

<!-- [43.09, -79.07]
[43.08, -79.06]
[43.1, -79.05] -->


<!-- https://leafletjs.com/reference.html#polygon -->

<!-- 
  Leaflet was created 11 years ago by Volodymyr Agafonkin, a Ukrainian citizen living in Kyiv.

Russian bombs are now falling over Volodymyr’s hometown. His family, his friends, his neighbours, thousands and thousands of absolutely wonderful people, are either seeking refuge or fighting for their lives.

The Russian soldiers have already killed tens of thousands of civilians, including women and children, and are committing mass war crimes like gang rapes, executions, looting, and targeted bombings of civilian shelters and places of cultural significance. The death toll keeps rising, and Ukraine needs your help.

As Volodymyr expressed a few days before the invasion:

If you want to help, educate yourself and others on the Russian threat, follow reputable journalists, demand severe Russian sanctions and Ukrainian support from your leaders, protest war, reach out to Ukrainian friends, donate to Ukrainian charities. Just don’t be silent.

Ukrainians are recommending the Come Back Alive charity. For other options, see StandWithUkraine.

If an appeal to humanity doesn’t work for you, I’ll appeal to your egoism: the future of Ukrainian citizens is the future of Leaflet.

It is chilling to see Leaflet being used for documenting Russia’s war crimes, factual reporting of the war and for coordination of humanitarian efforts in Romania and in Poland. We commend these uses of Leaflet.

If you support the actions of the Russian government (even after reading all this), do everyone else a favour and carry some seeds in your pocket.

Yours truly,
Leaflet maintainers.
 -->

<!-- 
Coordinates:
[43.09, -79.07]
[43.08, -79.06]
[43.1, -79.05]
Options:
Color: orange
fillOpacity: 0.8
weight: 6
Your map should now look like the one below.
 -->
<!-- 
[43.09, -79.07]
[43.08, -79.06]
[43.1, -79.05] 
-->



<!-- https://leafletjs.com/reference.html#polygon -->
<!-- Most tile providers such as OpenStreetMap and Google Maps require an attribution, 
please check the copyright notice of the tiles provider before publishing your page 
in production. -->

// Location Pin Text Bubble
// -0.550000,-90.550000           -0.540000,-90.540000             -0.560000,-90.530000
// update locations, this is the field of view    -0.5,-90.5 -0.500000,-90.500000
// Location Pin
                //  set view latitude 
                //  [11/06/2023 05:58 AM] I'm trying to think about where I left off. checking page.
                //  [11/06/2023 01:53 AM] latitude 
                //  [11/06/2023 02:35 AM] [Development Commentary] [686/868 is called "the chestnut ratio 868/686 is called "the hazel ratio"] 
                //  [11/06/2023 05:58 AM] [Attribution] [http://www.openstreetmap.org/copyright]
                //  [11/06/2023 05:58 AM] I think I remember, I have to set up this page first, and then move on to creating the other 18 pages. 
                //  [11/06/2023 05:59 AM] <!-- [11/06/2023 03:01 AM] [Development Commentary] [686/868 is called "the chestnut ratio 868/686 is called 
                // "the hazel ratio"] [11/06/2023 03:01 AM] [Development Commentary] [686/868 is called "the chestnut ratio 868/686 is called "the hazel ratio"] 
                // [11/06/2023 01:53 AM] [11/06/2023 01:53 AM] [Development Commentary] [686/868 is called "the chestnut ratio 868/686 is called "the hazel ratio"]-->

             // longitude set view latitude 
                //zoom


<!-- 
[11/06/2023 08:56 AM] [Leaflet Update Point] [Citations]    [http://www.openstreetmap.org/copyright]
  
  7. Conclusion & Takeaways
map: used to create a map on a page and manipulate it
tileLayer: used to load and display tile layers on the map
Marker: used to display clickable/draggable icons on the map
Polygon: A class for drawing polygon overlays on a map
Circle: A class for drawing circle overlays on a map
Leaflet allows easy interaction with and manipulation of maps.
The documentation is very complete.
With knowledge in JavaScript and Leaflet you can create big projects.
Attribution
Quick Start Guide - Leaflet - a JavaScript library for interactive maps. (n.d.). [Video]. https://leafletjs.com/examples/quick-start/


 -->

<!-- 6. Dealing with events
You can interact with the map using events (see documentation for details).
Every object has its corresponding event which can be used as a function. It allows you to react to user interaction. For example:
function onMapClick(e) {
        alert("You clicked the map at " + e.latlng);
}

map.on('click', onMapClick);
With this code, you can click anywhere on the map to view the coordinates of that point. It will show an alert like the one below:
alert image
Try to click on your page and see the alerts. -->

<!-- 

  You can interact with the map using events (see documentation for details).
Every object has its corresponding event which can be used as a function. It allows you to react to user interaction. For example:
function onMapClick(e) {
        alert("You clicked the map at " + e.latlng);
}

map.on('click', onMapClick);
With this code, you can click anywhere on the map to view the coordinates of that point. It will show an alert like the one below:
alert image
Try to click on your page and see the alerts.

 -->

<!-- polygon.bindPopup("She's hanging out at her favorite restaurants").openPopup(); -->
<!-- circle.bindPopup("<b>Where's that crazy girl?</b>").openPopup(); -->
<!-- marker.bindPopup("Your Favorite Place").openPopup(); -->

<!-- 
  var popup = L.popup()
           .setLatLng([43.1123, -79.01])
           .setContent("The last time we ever crossed paths.")
           .openOn(map); 
           
           -->

<!-- [working area]

marker.bindPopup("Testing a popup.").openPopup();
circle.bindPopup("<b>Testing!</b>I am a circle.");
polygon.bindPopup("Testing a polygon.");

[working area] -->

<!-- 
  
  Sometimes you need to attach information in your map. With the next code you can add easily a popup:
var popup = L.popup()
           .setLatLng([43.1123, -79.01])
           .setContent("Testing a popup.")
           .openOn(map);
It looks like this:

 -->

<!-- 
  
  We also can add a popup to our objects as makers, polygons, circles, etc. Add the following code to your page.
marker.bindPopup("Testing a popup.").openPopup();
circle.bindPopup("<b>Testing!</b>I am a circle.");
polygon.bindPopup("Testing a polygon.");
Refresh your page and try clicking on our objects. The popup appears when you click on the object and with method openPopup() you can see the popup immediately open the page (for makers only). See below.

 -->

<!-- weight	Number	3	Stroke width in pixels -->

<!-- fillOpacity	Number	0.2	Fill opacity. -->

<!-- 
I was missing brackets around the bracketed co-ordinates on the latlngs line

Reference:  Eliot Woidyla
            var latlngs = [[43.09, -79.07],[43.08, -79.06],[43.1, -79.05]];
            var polygon = L.polygon(latlngs, {color: 'orange', fillOpacity: 0.8, weight: 6}).addTo(map);

 -->

<!-- https://leafletjs.com/reference.html#polygon -->
<!-- 

var latlngs = [43.09, -79.07],[43.08, -79.06],[43.1, -79.05],];

var polygon = L.polygon(latlngs, {color: 'orange'}).addTo(map); 


 -->

<!-- that didn't work -->
<!-- var latlngs = [43.09, -79.07],[43.08, -79.06],[43.1, -79.05],];

var polygon = L.polygon(latlngs, {color: 'orange'}).addTo(map);  -->
<!-- [work area]

var latlngs = [43.09, -79.07],[43.08, -79.06],[43.1, -79.05],];

var polygon = L.polygon(latlngs, {color: 'orange'}).addTo(map); 

[work area] --> 

<!-- weight	Number	3	Stroke width in pixels -->

<!-- fillOpacity	Number	0.2	Fill opacity. -->

<!-- https://leafletjs.com/reference.html#polygon -->

<!-- [43.09, -79.07]
[43.08, -79.06]
[43.1, -79.05] -->


<!-- https://leafletjs.com/reference.html#polygon -->

<!-- 
  Leaflet was created 11 years ago by Volodymyr Agafonkin, a Ukrainian citizen living in Kyiv.

Russian bombs are now falling over Volodymyr’s hometown. His family, his friends, his neighbours, thousands and thousands of absolutely wonderful people, are either seeking refuge or fighting for their lives.

The Russian soldiers have already killed tens of thousands of civilians, including women and children, and are committing mass war crimes like gang rapes, executions, looting, and targeted bombings of civilian shelters and places of cultural significance. The death toll keeps rising, and Ukraine needs your help.

As Volodymyr expressed a few days before the invasion:

If you want to help, educate yourself and others on the Russian threat, follow reputable journalists, demand severe Russian sanctions and Ukrainian support from your leaders, protest war, reach out to Ukrainian friends, donate to Ukrainian charities. Just don’t be silent.

Ukrainians are recommending the Come Back Alive charity. For other options, see StandWithUkraine.

If an appeal to humanity doesn’t work for you, I’ll appeal to your egoism: the future of Ukrainian citizens is the future of Leaflet.

It is chilling to see Leaflet being used for documenting Russia’s war crimes, factual reporting of the war and for coordination of humanitarian efforts in Romania and in Poland. We commend these uses of Leaflet.

If you support the actions of the Russian government (even after reading all this), do everyone else a favour and carry some seeds in your pocket.

Yours truly,
Leaflet maintainers.
 -->

<!-- 
Coordinates:
[43.09, -79.07]
[43.08, -79.06]
[43.1, -79.05]
Options:
Color: orange
fillOpacity: 0.8
weight: 6
Your map should now look like the one below.
 -->
<!-- 
[43.09, -79.07]
[43.08, -79.06]
[43.1, -79.05] 
-->



<!-- https://leafletjs.com/reference.html#polygon -->
<!-- Most tile providers such as OpenStreetMap and Google Maps require an attribution, 
please check the copyright notice of the tiles provider before publishing your page 
in production. -->

...

I barely understand this garbage. I'm exhausted. I've been up all day and I really haven't gotten anything done. 
Most of the day was spent banging my head against the wall, only to have finally succeeded shortly after giving 
up and trying something else.

I'm going to go to sleep and come back around to this.

...

https://www.w3schools.com/react/react_getstarted.asp

...


I have about a million windows open on my computer right now, and I'm afraid to close any of them. 
I have too many things going on right now, as far as the project goes. project 15. kind of a headache.
I don't remember where I left off, I've been getting sidetracked. I'm going to close Steam for now. no 
gaming. I have videos uploaded on my youtube channel going out until September of 2024, and that's not 
including the 58 videos I haven't uploaded yet.

I don't know what to do right now. this should be easy, it's set up. that particular challenge is now 
over, and now I just have to get down to business. I want to refactor the index page as well.

...

<!-- https://kennethlarotyamat.github.io/project15/misc/refactoredproject12.html --> <!-- C:\Users\KLYam\OneDrive\Documents\GitHub\project15\misc\refactoredproject12.html -->

<!-- https://kennethlarotyamat.github.io/project15/index.html  --> <!-- C:\Users\KLYam\OneDrive\Documents\GitHub\project15\index.html -->

<!-- this project doesn't even use any javascript, so I'm not sure how I would refactor this using react -->
<!-- C:\Users\KLYam\OneDrive\Documents\GitHub\project15\misc\refactoredp112p11hamburgersdistindex.html -->
<!-- C:\Users\KLYam\OneDrive\Documents\GitHub\kennethlarotyamat.github.io\html\p112p11hamburgersdistindex.html -->
<!-- C:\Users\KLYam\OneDrive\Documents\GitHub\project15\index.html -->
<!-- https://kennethlarotyamat.github.io/project15/misc/refactoredproject14v004.html -->

<!-- C:\Users\KLYam\OneDrive\Documents\GitHub\kennethlarotyamat.github.io\html\project14v004.html -->
<!-- C:\Users\KLYam\OneDrive\Documents\GitHub\project15\misc\refactoredproject14v004.html -->
<!-- https://kennethlarotyamat.github.io\project15\misc\refactoredproject14v004.html -->

...

I'm copying versions into my project 15 repository of projects I'm going to refactor.
it takes forever for a page to deploy. or file.

...

I was having a really hard time setting up react using the node.js terminal, but I figured out how to use it. 
the way it's done in class, we don't install anything on our computer. it's done in a browser in a browser based 
IDE, in Codio, but I really don't want to do this in codio, I want to do this on VS code, so I have to install it 
on my computer. anyway. I did that, I installed node.js, and then started following the instructions, but nothing worked.

but then, I was able to get it to work. I have some screenshots of how it all went down and they are somewhere in this 
repository.

...

<!-- https://kennethlarotyamat.github.io/project15/misc/refactoredproject12.html --> <!-- C:\Users\KLYam\OneDrive\Documents\GitHub\project15\misc\refactoredproject12.html -->

<!-- https://kennethlarotyamat.github.io/project15/index.html  --> <!-- C:\Users\KLYam\OneDrive\Documents\GitHub\project15\index.html -->

<!-- this project doesn't even use any javascript, so I'm not sure how I would refactor this using react -->
<!-- C:\Users\KLYam\OneDrive\Documents\GitHub\project15\misc\refactoredp112p11hamburgersdistindex.html -->
<!-- C:\Users\KLYam\OneDrive\Documents\GitHub\kennethlarotyamat.github.io\html\p112p11hamburgersdistindex.html -->
<!-- C:\Users\KLYam\OneDrive\Documents\GitHub\project15\index.html -->

...

<!-- [11/06/2023 12:07 PM] Work on these for map pins [11/06/2023 12:11 PM] Page Names have been updated for maps, this isn't really something that anyone would see but, I took
the time to take care of it.  I want to test something. -->

<!-- [11/06/2023 03:09 AM] replacing relative paths with absolute paths src="../html/jcs0018.html"  src="../html/jcs0019.html"  -->
<!-- [11/06/2023 03:09 AM] absolute paths work. -->
<!-- [11/05/2023 04:21]  2 more slides created [11/05/2023 04:21] -->
<!-- [11/05/2023 04:21] Meet Me Button should be on all pages [11/05/2023 04:10 AM] -->
<!-- [11/06/2023 03:09 AM]
        [11/05/2023 03:50]

        everything should be linked up at this point, and once everything is deployed, it should all work, and I could test if what I think 
        is working is actually working, getting the iframes in the carousel to work would be really awesome.
        
        href="https://en.wikipedia.org/wiki/Lana_Del_Rey" target="_self"  [11/05/2023 03:45] [11/05/2023 03:40] [11/05/2023 02:55] 
-->

<!-- 
        [Development Commentary]                        [11/05/2023 03:35] [11/05/2023 03:33]

        Even with as much time as I've spent on this, and seemingly no closer to getting a JSON file working, I seem to have
        made a breakthrough with this carousel. The iframes look like they are interactive in a way that they were not interactive
        in the original Project 10 version of the carousel.

        I'm setting up links to see if the iframes in the carousel work, and if they do, then that means this should work. and I can
        get project 14 completed, even though this seems like it was kind of a long digression from the requirements of project 14.

 -->

...

<!-- 
        [References]                    [https://codepen.io/shafferma08] [https://codepen.io/marnee] [https://codepen.io/shafferma08/pen/NWERvOr]
                                        [https://codepen.io/shafferma08/pen/KKrjwjL] [https://codepen.io/shafferma08/pen/NWERvOr]
                                        [https://en.wikipedia.org/wiki/CSS_Flexible_Box_Layout]
                                        [https://css-tricks.com/snippets/css/a-guide-to-flexbox/]
                                        [https://css-tricks.com/snippets/css/a-guide-to-flexbox/]
                                        [https://www.w3schools.com/bootstrap5/bootstrap_carousel.php] [11/05/2023 02:40]
                                        [https://www.w3schools.com/tags/tag_span.asp] [<script src="https://kennethlarotyamat.github.io/javascript/project14v002.js"></script>]
                                        [ <link rel="stylesheet" href="   https://kennethlarotyamat.github.io/CSS/project14v002.css   "> ]
                                        [class="yellowRight carousel-control-next" type="button" data-bs-target="#demo1,#demo2" data-bs-slide="next"]
                                        [<button class="carousel-control-next" type="button" data-bs-target="#demo" data-bs-slide="next"><span class="hazelText" >Swipe</span><br> <span class="sanguineText" >Right</span> </button>]
                                        [https://codepen.io/shafferma08/pen/KKrjwjL] [https://kennethlarotyamat.github.io/html/project14v004.html] [https://stackoverflow.com/questions/77422567/bootstrap-carousel-issues-bootstrap-version-5]
        
        [Development Commentary]        One of the issues that I had with the carousel, was that I had a different bootstrap version
                                        in place than the documentation example that I was following, I had version 5 active, and the
                                        documentation example used version 3. continue revisions based on the original project.
                                        [C:\Users\KLYam\OneDrive\Documents\GitHub\kennethlarotyamat.github.io\html\project14.html]
                                        a lot of the issues come from clashes that occur between flex, block, and grid display. with
                                        this newer version, I went with all flex. or, the main containers are all flex. [10/04/2023 14:46]
                                        this project took pretty much forever, and it's still not quite finished.
                                        [11/06/2023 02:35 AM] [Development Commentary] [686/868 is called "the chestnut ratio 868/686 is called "the hazel ratio"]
                                        [11/06/2023 02:35 AM]
                                        
-->
<!-- [11/05/2023 04:39] -->

...

<!-- https://kennethlarotyamat.github.io/project15/misc/refactoredproject12.html -->

...

<!-- C:\Users\KLYam\OneDrive\Documents\GitHub\kennethlarotyamat.github.io\html\reactCDNuse.html -->

...

<!-- C:\Users\KLYam\OneDrive\Documents\GitHub\kennethlarotyamat.github.io\html\reactCDNuse.html -->

...

Alright, well it seems like this might be working.

...


It seems to be working, and what I mean is, the node.js terminal seems to be 
installing whatever it is I need installed to create a react app, so maybe I don't 
need to use only CDNs as a result. I'll see where this goes.

...

I'm probably never going to figure out this terminal garbage. 
I'm going to use the React CDN.

...

I don't even understand what to do here.

...

I'm going to see what refactoring project 12 does. this is the project where I use the most JavaScript.

...

This is already a nightmare.


...

Generative AI is experimental. You may see inaccurate creative content. Learn more
To change directories
 in the terminal
, you can use the cd command. The syntax is:
cd <directory name>
Use code with caution.
Learn more
For example, to change to the "Downloads" directory
, you would type:
cd Downloads
Use code with caution.
Learn more
To change to the parent directory, you would type:
cd ..
Use code with caution.
Learn more
To change to the root directory
, you would type:
cd /
Use code with caution.
Learn more
You can also use the cd command to navigate to a directory that is located multiple levels up. For example, to change to the "Documents" directory that is located two levels up, you would type:
cd Documents
Use code with caution.
Learn more
You can also use the cd command to navigate to a directory that is located on a different drive. For example, to change to the "C:\Users" directory on the C drive, you would type:
cd C:\Users
Use code with caution.
Learn more
If you are not sure what directory you are currently in, you can use the pwd command to print the current working directory
.
Here are some examples of how to use the cd command:
cd Downloads
Use code with caution.
Learn more
Change to the "Downloads" directory.
cd ..
Use code with caution.
Learn more
Change to the parent directory.
cd /
Use code with caution.
Learn more
Change to the root directory.
cd Documents
Use code with caution.
Learn more
Change to the "Documents" directory that is located two levels up.
cd C:\Users
Use code with caution.
Learn more
Change to the "C:\Users" directory on the C drive.
pwd
Use code with caution.
Learn more
Print the current working directory.




Export
How to change directory from C to D in CMD?
How do I change the default folder in Mac terminal?
Ask a follow up...




https://code.visualstudio.com/docs/nodejs/reactjs-tutorial#:~:text=Using%20React%20in%20Visual%20Studio,navigation%20out%20of%20the%20box.

...

start a New React Project
If you want to build a new app or a new website fully with React, we recommend picking one of the React-powered frameworks popular in the community. Frameworks provide features that most apps and sites eventually need, including routing, data fetching, and generating HTML.

Note
You need to install Node.js for local development. You can also choose to use Node.js in production, but you don’t have to. Many React frameworks support export to a static HTML/CSS/JS folder.

Production-grade React frameworks 
Next.js 
Next.js is a full-stack React framework. It’s versatile and lets you create React apps of any size—from a mostly static blog to a complex dynamic application. To create a new Next.js project, run in your terminal:

 Terminal
 Copy

npx create-next-app@latest

If you’re new to Next.js, check out the Next.js tutorial.

Next.js is maintained by Vercel. You can deploy a Next.js app to any Node.js or serverless hosting, or to your own server. Next.js also supports a static export which doesn’t require a server.


...

npx create-next-app@latest

...

I'm thinking right now. Project 15 should be pretty easy. 
the only issue is setting up the environment or whatever 
to refactor the page or project I want to refactor using 
react. This should be easy, but there have been many times 
that I thought something would be easy, and it turned out 
to me a total nightmare to do.

I copied my misc repositry page and I'm going to use it as 
the project 15 landing page.

...

https://react.dev/learn/add-react-to-an-existing-project

LEARN REACT
INSTALLATION
Add React to an Existing Project
If you want to add some interactivity to your existing project, you don’t have to rewrite it in React. Add React to your existing stack, and render interactive React components anywhere.


...

<!-- <!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">

<title>Project 15</title>

<link rel="icon" href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhis5UXOyPLEmBDmRjOHERNBK5CSCBwelHPiOaPwzn903vmcdjBQ_QFy9t4b5N-WNQaxgDTKjK4l7VsbpzXJ9Y82q7MJrdk8c3xq3Nty_TvvAAK1SglaLV9c3f4alOXkW8tYJEZ50WBzNW2tWXdj-ssJLN3HNPhqw0A1DQMNdwJu0aNGArbOUZ3nyvXO-A/s320/Chestnut%20+%20Hazel%20%200123%20(12)%2000%20002%20048.png">

<link rel="stylesheet" href="C:\Users\KLYam\OneDrive\Documents\GitHub\project15\project15.css">

</head>
<body>

    <p>
        
        I set up node.js 
        I don't know what to do, because I didn't really follow along 
        during the lesson involving react.

    </p>


<p>
This is where I will work on project 15. I've procrastinated on this quite a bit. I'm starting it on the due date.
</p>

<p>
    I haven't really decided what to do with this yet.
</p>


 -->

<!-- migration test -->
<!-- <script src="C:\Users\KLYam\OneDrive\Documents\GitHub\project15\project15.js"></script>
</body>
</html> -->

<!-- C:\Users\KLYam\OneDrive\Documents\GitHub\kennethlarotyamat.github.io\javascript\tfmiscindex.js -->
<!--   <script src="..\miscellaneous\javascript\index.js"></script> -->
<!-- Deployment Test Tag [ 11/03/2023 06:59 PM ] -->
<!-- C:\Users\KLYam\OneDrive\Documents\GitHub\kennethlarotyamat.github.io\media\text\READMEmiscREP.md -->
<!-- C:\Users\KLYam\OneDrive\Documents\GitHub\kennethlarotyamat.github.io\media\text\README.md -->
<!-- <iframe  src="https://github.com/kennethlarotyamat/miscellaneous" style="aspect-ratio: 8.68/6.86; height: auto; width:100%;" scrolling="yes"   
allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen ></iframe> -->
<!-- <form class="exampleForm" id="exampleForm" autocomplete="off" action="mailto:info@chestnutandhazel.com" target="" method="post" novalidate>  </form> -->
<!-- Deployment Test Tag [ 11/03/2023 06:59 PM ] -->

<!-- [11/05/2023 09:45 AM] [Deployment Test] [11/05/2023 09:45 AM] [Deployment Test] <link rel="icon"  href="..\media\favicon22223211223211.png">     -->
<!-- migration test -->
<!-- <iframe  src="https://github.com/kennethlarotyamat/miscellaneous" style="aspect-ratio: 8.68/6.86; height: auto; width:100%;" scrolling="yes"   
allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen ></iframe> -->
<!-- [11/05/2023 09:45 AM] [Deployment Test] <link rel="stylesheet" href="..\miscellaneous\css\index.css"> -->
<!-- This should work.  -->
<!-- <link rel="stylesheet" href="C:\Users\KLYam\OneDrive\Documents\GitHub\kennethlarotyamat.github.io\CSS\tfmiscindex.css"> -->
<!-- <link rel="stylesheet" href="../CSS/tfmiscindex.css"> -->
<!-- <link rel="stylesheet" href="https://kennethlarotyamat.github.io/CSS/tfmiscindex.css"> -->
<!-- <link rel="stylesheet" href="C:\Users\KLYam\OneDrive\Documents\GitHub\kennethlarotyamat.github.io\CSS\tfmiscindex.css"> -->

4. Conclusion
Project: Add to Personal Website
As with other modules, we’ve once again covered a lot this week. Being exposed to frontend 
frameworks for the first time constitutes a significant shift of mentality in terms of the 
way we build web applications, and can definitely be difficult and confusing at first. If 
you struggled with this module, don’t beat yourself up! Keep practicing, practicing, practicing, 
and you’ll be a master of React soon enough. For now, take a moment and truly appreciate how 
far you’ve come since the beginning of this course!
Speaking of practice… use this project time now to try and implement what you learned throughout this week.
One suggestion would be to try and refactor your personal website in React. Alternatively, you could 
try searching Google for some React project ideas and attempt to build one of them. Or, maybe you’ve 
got your own idea for a React project already and could try building that.
As always, whatever project you choose to work on, happy coding!
Submission steps:
Before you click on "Mark as Completed":
You need to do one of the following: either upload all of your files to Codio or deploy a GitHub Page for this project.
Also, if you mark this project as complete but any of the boxes are blank, your TA will be unable to grade your project.
Codio upload:
Make sure all of your project code has been uploaded to Codio.
If you did not write your code in Codio, you will need to import all of the required files into your workspace file tree.
You can do this by going to File => Upload Files, and either manually importing each file, or dragging and dropping your project folder.
Please refer to this video if you are unsure of what to do.
GitHub Pages:
If you would rather upload your project to GitHub, please make sure to have the project deployed as a 
GitHub page so we can thoroughly test it.
If you are unsure of how to do this, please follow these instructions.
It is important to understand you will need to make a separate repository for every project. You cannot deploy multiple 
pages from the same repository, even with different branches.
Also, no matter whether you uploaded your files from your computer or not, make sure to thoroughly test your code! This 
only takes a few minutes, but will prevent the amount of resubmissions because you missed something.
GitHub Repo & Pages Links
If your project is uploaded to Codio, simply type "N/A".

Submit Answer!
Summarize your React Application
Please provide a summary of the React application you developed and describe its functionality.

Submit Answer!
Mark as CompletedBack to dashboard

...

https://www.youtube.com/watch?v=9Ko6_tb5Z6Q

...

3

Front-end Frameworks + CMS 3 - Saturday, November 4

In the first lesson you will learn how to generate a new Angular project using the Angular CLI , learn some common Angular CLI commands and get a high-level overview of the structure of a basic Angular project. In the second lesson you will understand the benefits of Vue.js, learn how to generate a new Vue project and discover how the different files in a Vue project connect together.

Session Recording - Module 15 Day 3 - Sat., November 4
Module 15 Lesson 3.1
Module 15 Lesson 3.2
Module 15 Lesson 3.3 & Project 15

...

https://www.youtube.com/watch?v=aRRXAX_HwWc

...

1. Introduction to React
Goals
By the end of this lesson, you should understand:
What React is, and what single page applications (SPAs) are
The purpose of React and why it was created
Several key concepts of React such as components, the virtual DOM, and one-way data binding
Introduction
In this lesson, we will begin learning about the immensely popular and powerful frontend JavaScript library React. First, we’ll delve a bit into the fascinating evolution of frontend development, charting the progression from early vanilla JavaScript to the emergence of libraries and frameworks that have revolutionized the way web applications are built today. Additionally, we will discuss the concept of single-page applications (SPAs) in greater depth, exploring their advantages, challenges, and the role of React in facilitating their development. By understanding the historical context and the advancements that led to the creation of React, you will gain a deeper appreciation for its significance in modern web development and its role in shaping the future of frontend technologies.

...

Generative AI is experimental. You may see inaccurate creative content. Learn more
To set up a React
 project using Create React App, you can use the following steps:
Open a terminal
 or command line on your computer.
Install the Create React App package globally by running the following command:
npm install -g create-react-app
Use code with caution.
Learn more
Create a new React project by running the following command:
npx create-react-app my-react-app
Use code with caution.
Learn more
Change directory to the new project folder by running the following command:
cd my-react-app
Use code with caution.
Learn more
Start the development server by running the following command:
npm start
Use code with caution.
Learn more
Open your browser and go to http://localhost
:3000. You should see the React logo on the screen.
Here are some additional things you can do:
You can customize the project by editing the files in the src/ folder.
You can add new features to the project by installing npm packages.
You can deploy the project to a production server once you are finished developing it.

...

https://legacy.reactjs.org/docs/create-a-new-react-app.html

...

https://react.dev/learn/start-a-new-react-project

https://react.dev/learn/start-a-new-react-project

...

Generative AI is experimental. You may see inaccurate creative content. Learn more
Here are the steps on how to refactor your personal website in React:
Create a new React project.
You can use the create-react-app command to create a new React project. For example:
npx create-react-app my-website
Use code with caution.
Learn more
Copy your website's content into the React project.
Once you have created a new React project, you can copy your website's content into the project. This includes all of your HTML, CSS, and JavaScript files.
Break down your website's content into components.
Once you have copied your website's content into the React project, you need to break down the content into components. This means that you need to identify the different parts of your website and create a separate component for each part.
Write code for each component.
Once you have broken down your website's content into components, you need to write code for each component. This code will be responsible for rendering the component and handling any user interactions.
Combine the components into a single application.
Once you have written code for each component, you need to combine the components into a single application. This can be done by importing the components into a main file and then rendering them using the ReactDOM.render() method.
Deploy the application.
Once you have combined the components into a single application, you can deploy the application. This can be done by using a service like Netlify or Heroku.
Here are some additional tips for refactoring your personal website in React:
Use a library like Redux to manage the state of your application.
Use a CSS framework like Bootstrap or Material UI to style your application.
Use a testing framework like Jest to test your application.
Use a continuous integration (CI) service like Travis CI or CircleCI to automatically build and test your application.

...

4. Conclusion

Project: Add to Personal Website

As with other modules, we’ve once again covered a lot this week. Being exposed to frontend 
frameworks for the first time constitutes a significant shift of mentality in terms of the way 
we build web applications, and can definitely be difficult and confusing at first. If you 
struggled with this module, don’t beat yourself up! Keep practicing, practicing, practicing, 
and you’ll be a master of React soon enough. For now, take a moment and truly appreciate how 
far you’ve come since the beginning of this course!

Speaking of practice… use this project time now to try and implement what you learned 
throughout this week.

One suggestion would be to try and refactor your personal website in React. Alternatively, 
you could try searching Google for some React project ideas and attempt to build one of them. 
Or, maybe you’ve got your own idea for a React project already and could try building that.
As always, whatever project you choose to work on, happy coding!

Submission steps:

Before you click on "Mark as Completed":
You need to do one of the following: either upload all of your files to Codio or deploy a GitHub Page for this project.
Also, if you mark this project as complete but any of the boxes are blank, your TA will be unable to grade your project.

Codio upload:

Make sure all of your project code has been uploaded to Codio.
If you did not write your code in Codio, you will need to import all of the required files into your workspace file tree.
You can do this by going to File => Upload Files, and either manually importing each file, or dragging and dropping your project folder.
Please refer to this video if you are unsure of what to do.

GitHub Pages:

If you would rather upload your project to GitHub, please make sure to have 
the project deployed as a GitHub page so we can thoroughly test it.
If you are unsure of how to do this, please follow these instructions.
It is important to understand you will need to make a separate repository 
for every project. You cannot deploy multiple pages from the same repository, 
even with different branches. Also, no matter whether you uploaded your files 
from your computer or not, make sure to thoroughly test your code! This only 
takes a few minutes, but will prevent the amount of resubmissions because you missed something.

...

https://legacy.reactjs.org/docs/create-a-new-react-app.html

https://react.dev/

https://react.dev/learn/start-a-new-react-project

https://react.dev/

...

DEEP DIVE
Can I use React without a framework? 

Hide Details
You can definitely use React without a framework—that’s how you’d use React for a part of your page. However, if you’re building a new app or a site fully with React, we recommend using a framework.

Here’s why.

Even if you don’t need routing or data fetching at first, you’ll likely want to add some libraries for them. As your JavaScript bundle grows with every new feature, you might have to figure out how to split code for every route individually. As your data fetching needs get more complex, you are likely to encounter server-client network waterfalls that make your app feel very slow. As your audience includes more users with poor network conditions and low-end devices, you might need to generate HTML from your components to display content early—either on the server, or during the build time. Changing your setup to run some of your code on the server or during the build can be very tricky.

These problems are not React-specific. This is why Svelte has SvelteKit, Vue has Nuxt, and so on. To solve these problems on your own, you’ll need to integrate your bundler with your router and with your data fetching library. It’s not hard to get an initial setup working, but there are a lot of subtleties involved in making an app that loads quickly even as it grows over time. You’ll want to send down the minimal amount of app code but do so in a single client–server roundtrip, in parallel with any data required for the page. You’ll likely want the page to be interactive before your JavaScript code even runs, to support progressive enhancement. You may want to generate a folder of fully static HTML files for your marketing pages that can be hosted anywhere and still work with JavaScript disabled. Building these capabilities yourself takes real work.

React frameworks on this page solve problems like these by default, with no extra work from your side. They let you start very lean and then scale your app with your needs. Each React framework has a community, so finding answers to questions and upgrading tooling is easier. Frameworks also give structure to your code, helping you and others retain context and skills between different projects. Conversely, with a custom setup it’s easier to get stuck on unsupported dependency versions, and you’ll essentially end up creating your own framework—albeit one with no community or upgrade path (and if it’s anything like the ones we’ve made in the past, more haphazardly designed).

If you’re still not convinced, or your app has unusual constraints not served well by these frameworks and you’d like to roll your own custom setup, we can’t stop you—go for it! Grab react and react-dom from npm, set up your custom build process with a bundler like Vite or Parcel, and add other tools as you need them for routing, static generation or server-side rendering, and more.

...

https://code.visualstudio.com/docs/nodejs/nodejs-tutorial

https://www.linkedin.com/pulse/can-you-use-gaming-pc-work-pros-cons-revealed-mike-pawlik/

...

https://turbotax.intuit.com/tax-tips/college-and-education/can-i-deduct-my-computer-for-school-on-taxes/L6QNESb7Q

...

7. Conclusion and Takeaways
In this lesson, we have learned about the origins and purposes of React, explored its key concepts, and understood its underlying principles. We have gained an appreciation for React’s focus on the declarative programming paradigm, which simplifies the process of creating and managing UI updates. We have also learned about the virtual DOM and how it improves performance by minimizing costly DOM manipulations. Additionally, we have explored React’s component-based architecture, which promotes code reusability and maintainability, as well as the importance of one-way data binding and unidirectional data flow. In the next lesson, we will set up our development environment and start writing some React code!

...

6. Knowledge Check

When was React open-sourced?


2009


2011


2013


2015

Check It! (3 left)


Which programming paradigm does React follow?


Imperative


Declarative


Procedural


Object-oriented

Check It! (3 left)


What is the primary purpose of the virtual DOM in React?


To update the UI in real-time


To improve performance by minimizing DOM updates


To store data for the application


To manage component state

Check It! (3 left)


In React, what is the main advantage of using a component-based architecture?


It allows for easier debugging


It makes it easier to share components between applications


It promotes code reusability and modularity, making the application easier to maintain


It reduces the size of the application bundle

Check It! (3 left)


How does data flow in React applications?


Bidirectional data flow


Downstream data flow


Unidirectional data flow


Top-down data flow

Check It! (3 left)
Next

...

5. Core Concepts in React
Let’s look at some of React’s core concepts which are important to understand before we begin using it in order to fully appreciate why React is so advantageous for frontend development.
Declarative vs Imperative Programming
The imperative paradigm of programming, which is what we’ve been doing with JavaScript so far in this course, requires developers to explicitly define each step of the program – make this change to the DOM, then that change; if the user does this, then make a different DOM update, etc.
Let’s look at a very simple example to help illustrate the difference between imperative and declarative:
Imperative Example:
Imagine you want to change the background color of a div with an ID of “myDiv” to red when a button is clicked. In imperative programming, you would explicitly specify the steps to achieve this:
const button = document.getElementById('myButton');
const myDiv = document.getElementById('myDiv');

button.addEventListener('click', function () {
  myDiv.style.backgroundColor = 'red';
});
Declarative Example:
Now let’s look at the same example, implemented in a declarative way with React. In the declarative paradigm, we simply express what we want to achieve without detailing the specific steps. React will then handle the updating the DOM for us:
import { useState } from 'react';

function App() {
  const [bgColor, setBgColor] = useState('');

  const handleClick = () => {
    setBgColor('red');
  };

  return (
    <div>
      <button onClick={handleClick}>Change color</button>
      <div id="myDiv" style={{ backgroundColor: bgColor }}>Hello, World!</div>
    </div>
  );
}

export default App;

Here, we’re using the useState React hook to manage the background color state (more on hooks and state later). When the button is clicked, the handleClick function updates the background color to red, and React takes care of updating the UI accordingly.
React follows this declarative paradigm, which is one of the reasons it has become so popular among developers. By abstracting away much of the complexity involved in updating the UI, React enables developers to focus on what they want their applications to do, rather than how they should do it.
Virtual DOM
React uses a virtual DOM to improve performance. The virtual DOM is an in-memory representation of the actual DOM (Document Object Model), which is the structure representing the elements on a web page. In traditional web development, manipulating the DOM can be slow and resource-intensive, leading to poor performance and a suboptimal user experience.
Whenever a component’s state changes, React calculates the difference between the current virtual DOM and the new one. Once the differences have been determined, React updates the real DOM with the minimal set of changes required. This approach minimizes the number of DOM manipulations, leading to significant performance improvements.
Reactive Updates
React automatically updates the UI when the application state changes. This is achieved through the use of reactive updates, which efficiently update only the components affected by the state change. When a component’s state or properties (also known as “props”) change, React triggers a re-render of that component and its children, ensuring that the UI is always in sync with the application state.
This reactive approach simplifies the process of managing UI changes in response to data updates. React handles this automatically, allowing developers to focus on implementing the application’s core functionality.
Component-based Architecture
React follows a component-based architecture, allowing developers to build complex UIs by breaking them down into reusable, isolated components. Each component is a self-contained unit with its own state and properties, encapsulating the logic and rendering for a specific part of the UI.
This modular approach promotes code reusability and maintainability, making it easier to manage large applications with numerous features and components. By composing an application from smaller, focused components, developers can create highly organized and scalable codebases that are easier to understand and debug.
One-way Data Binding
React enforces a unidirectional data flow (one-way data binding). This means that data flows from parent components to child components, making it easier to track and debug data changes in the application.
Next

...

4. Single Page Applications (SPAs)
Typically, as you may remember from the explanation of the client-server model in Week One, the way the vast majority of websites used to work is as follows: a user entered a URL in a browser’s address bar, which then made a request to that website’s server. The server, in turn, sent back to the user all the HTML, CSS, and JavaScript necessary to display the requested page. If the user clicked a link to go to a different page on that website, another request was sent to the server, which then sent back another HTML document with its associated CSS and JavaScript, and so on.
Single-page applications (SPAs), on the other hand, are web applications that load a single HTML page and dynamically update the content as the user interacts with the application – including navigating to a new “page.” This approach provides a smoother, more seamless user experience compared to traditional multi-page applications.
There are several advantages to using SPAs:
Improved performance: By reducing the need for full-page refreshes, SPAs can deliver faster, more responsive user experiences.
Simplified deployment and maintenance: With a single HTML file and separate assets (JavaScript, CSS, images), SPAs can be easier to deploy and maintain compared to traditional multi-page applications.
Enhanced user experience: The app-like behavior of SPAs can lead to a more engaging and user-friendly experience, as users can navigate and interact with the application more quickly and smoothly.
However, there are also some challenges associated with SPAs:
SEO: Due to their reliance on JavaScript for rendering content, SPAs can sometimes face issues with search engine optimization (SEO). Modern search engines have improved their ability to index SPAs, but developers still need to take extra precautions to ensure their content is crawlable and indexable.
Initial load time: As SPAs load most of the application resources upfront, the initial load time can be longer compared to traditional multi-page applications. However, once the initial resources are loaded, subsequent interactions are usually much faster.
Browser history management: Since SPAs don’t rely on traditional page navigation, managing browser history and enabling the back button functionality can be more complex. Developers often use client-side routing libraries to handle this aspect of SPAs.
Of course, as React has only grown in popularity over the years, and the number of React developers has exponentially multiplied, there exists a wealth of different solutions within the React ecosystem to help address these challenges (as there are in other SPA frameworks like Angular and Vue). We’ll cover a couple of them later this week – namely, React Router and React’s lazy loading functionality.
Next

...

3. The Birth of React
As web applications continued to evolve, the need for a more efficient and performant solution became apparent – one that could adequately address the challenges of maintaining and scaling large, complex applications with rapidly changing data. This solution emerged at Facebook, of all places!
Facebook’s applications grew, and the engineering team realized that traditional methods for building user interfaces were becoming increasingly inefficient and difficult to manage. To solve this problem, Facebook engineer Jordan Walke began developing React in 2011. After several iterations and improvements, React was eventually open-sourced in 2013, allowing the wider development community to contribute to and utilize the library. Today, React is used by a vast number of companies and developers, making it one of the most popular JavaScript libraries for building UIs.
React is primarily used for developing what are known as single-page applications (SPAs), where the user interacts with and navigates through the website without requiring full-page refreshes. We’ll delve deeper into single-page applications shortly. For now, suffice it to say that one of React’s core strengths is its ability to handle rapidly changing data and seamlessly update the UI without causing unnecessary re-rendering or page refreshes. This is particularly useful when building applications that need to display real-time information or have numerous user interactions.
Next

...

2. Evolution of Frontend Development
To better understand the significance of React in modern web development, it’s helpful to examine the evolution of frontend development over the years. Frontend development has come a long way from using only basic vanilla JavaScript to now having a plethora of advanced libraries and frameworks, shaping the way we build applications today.
Vanilla JavaScript
In the early days of web development, developers were limited to using vanilla JavaScript, which refers to plain JavaScript without any additional libraries or frameworks, to interact with the DOM. While this early form of JavaScript allowed for basic interactivity and DOM manipulation, it was very limited in terms of functionality and often required a lot of repetitive code. As web applications became more complex, developers sought more efficient ways to build dynamic user interfaces.
jQuery
jQuery, released in 2006, was a game-changer for frontend development. It provided a simple, powerful API for DOM manipulation, event handling, and AJAX requests, all while ensuring cross-browser compatibility. jQuery significantly reduced the amount of code required to perform common tasks and quickly became the go-to library for frontend developers.
Early frontend frameworks
As web applications continued to grow in complexity, developers needed more robust solutions for organizing and structuring their code. In response, libraries like Backbone.js and frameworks like the original Angular.js emerged, offering more sophisticated tools for building web applications.
Backbone.js, released in 2010, introduced a lightweight, flexible structure based on the Model-View-Controller (MVC) pattern. It provided developers with a way to manage application state and encouraged code modularity.
Angular.js, introduced by Google in 2010, took frontend development yet a step further with its two-way data binding, dependency injection, and built-in directives. Angular.js enabled developers to create complex, feature-rich applications with less code and effort than ever before.
Next

...

1. Introduction to React
Goals
By the end of this lesson, you should understand:
What React is, and what single page applications (SPAs) are
The purpose of React and why it was created
Several key concepts of React such as components, the virtual DOM, and one-way data binding
Introduction
In this lesson, we will begin learning about the immensely popular and powerful frontend JavaScript library React. First, we’ll delve a bit into the fascinating evolution of frontend development, charting the progression from early vanilla JavaScript to the emergence of libraries and frameworks that have revolutionized the way web applications are built today. Additionally, we will discuss the concept of single-page applications (SPAs) in greater depth, exploring their advantages, challenges, and the role of React in facilitating their development. By understanding the historical context and the advancements that led to the creation of React, you will gain a deeper appreciation for its significance in modern web development and its role in shaping the future of frontend technologies.
Next

...

https://react.dev/learn/add-react-to-an-existing-project

...

These videos that I've uploaded to YouTube today are taking forever to load. This time, I made the decision to upload the largest files, rather than whatever random videos occurred to me to upload. I figured that I could get these large files out of my storage space. but, yeah, they are taking forever to upload.

...

My software development course will be over next week. This comes as kind of a relief, but I'm also kind of sad about it, I really enjoyed this class. I don't know how I'm going to continue to stay motivated to work on web and software development projects without project being due, everything I work on after class will be a self directed project. Yeah, I've been spending way too much, mountains of time playing computer games.

 ...

 frontend-frameworks--lesson-3-3slashproject-15---sat---nov--4

...

frontend-frameworks--lesson-3-3slashproject-15---sat---nov--4

...

One suggestion would be to try and refactor your personal website in React. Alternatively, you could try searching Google for some React project ideas and attempt to build one of them. Or, maybe you’ve got your own idea for a React project already and could try building that.

...

1

Front-end Frameworks + CMS 1 - Tuesday, October 31

In the first lesson you will learn what React is, and what single page applications (SPAs) are ,
the purpose of React and why it was created and several key concepts of React such as components, 
the virtual DOM, and one-way data binding. In the second lesson you will learn how to set up a React 
environment using both create-react-app (CRA) and Vite, what JSX is and its role in React components 
and how to create both class components and function components. In the third lesson you will cover how 
to utilize props to pass data to child components, the concept of hooks and how to utilize them, how to 
manage state within a React component and various methods of styling React components, including inline 
styles, CSS/SCSS modules, and styled-components.

Session Recording - Module 15 Day 1 - Tue., October 31
Module 15 Lesson 1.1
Module 15 Lesson 1.2
Module 15 Lesson 1.3

...

    <!-- [11/06/2023 08:56 AM] [Leaflet Update Point]
    
    Development Notes - I want to bring the swipe left and right text down slightly, and 
    kind of change the fields to that swiping left and right 
    doesn't have to be exactly on the text, but in the general colored field 
    file:///C:/Users/KLYam/OneDrive/Documents/GitHub/kennethlarotyamat.github.io/html/project14v004.html 
    
    -->
    
    <!-- [11/06/2023 06:16 AM] checking page Looks good. -->
    <!-- 
            [11/06/2023 01:53 AM]   [Resources] [https://dev.to/ingosteinke/inspecting-the-wrong-elements-in-the-browser--3jce]
            [Development Notes]     refer to [Oct 28] course material to figure out map stuff to figure out how to use
                                    leaflet or maps for the [meet me at our spot] section. [Oct 2.3] [11/06/2023 01:53 AM] it's
                                    in, it's working, meet me at our spot button is working with leaflet.
                                    [11/06/2023 01:53 AM] I'm going to leave this page for now and continue working on project 14
                                    version 4 and continue the leaflet aspect of the project. [11/06/2023 01:53 AM]
            [11/06/2023 01:53 AM]   checking page. [11/06/2023 01:53 AM] [11/06/2023 01:53 AM] 
    -->
    <!-- [11/05/2023 06:00 AM] align="center"  align="center" Image from https://leafletjs.com/index.html -->
    
    <!-- [11/05/2023 09:45 AM] [Deployment Test] [11/05/2023 06:00 AM] [11/05/2023 05:56 AM]  moved development notes to a central location. These will be moved to a dedicated text file 
            once this part of the project is completed. or. once they. once it makes sense to free up the space.
    -->
    
    
    
    
    
    <!-- migration test -->
    <!--
    
    [11/05/2023 05:50] Removed Video Material From Repository 
    
    [11/05/2023 05:50] [Quiz] [https://sekllanchenruan.github.io/anime-quiz-app/]
    I need to review how to do this. I think that he managed to use
    a JSON file for his quiz project, I couldn't figure out how to do it.
    
    [11/04/2023 23:29] [11/04/2023 23:25] kennethlarotyamat.github.io/html/project10index.html 
    I moved a number of files around to make things easier for me to look at.
    kennethlarotyamat.github.io/html/project10index.html
    I moved a number of files around into different directories, this created a 
    number of problems are are being fixed as I come across them.
    [11/04/2023 23:25]
    
    [11/04/2023 23:29] [Needs to be fixed] [11/04/2023 23:29]
    https://kennethlarotyamat.github.io/html/project10index.html
    file:///C:/Users/KLYam/OneDrive/Documents/GitHub/kennethlarotyamat.github.io/html/project10index%20copy.html
    https://kennethlarotyamat.github.io/html/project10index.html
    [11/04/2023 23:29] 
    
    -->
    
    <!-- [11/05/2023 05:50] -->
    <!-- [11/05/2023 04:46] checking page -->
    <!-- [11/05/2023 04:46] page works -->
    <!--  [11/05/2023 04:46] i still can't figure out why the favicon doesn't work on this page. -->
    <!-- https://www.learnwithjason.dev/blog/get-form-values-as-json -->
    <!-- form start, collect information in JSON format [11/04/2023 23:10] Need to Fix This, Collect response in JSON FORMAT [11/05/2023 02:40]-->
    <!-- [11/04/2023 23:03] https://kennethlarotyamat.github.io  C:\Users\KLYam\OneDrive\Documents\GitHub\kennethlarotyamat.github.io\javascript\script.js -->
    <!-- [Work Area - Need to put maps into the Chestnut and Hazel Connections Carousel - For Mobile] [11/05/2023 06:00 AM] -->
    <!-- assignment11index.html need to fix this link [Should be fixed. will check] -->
    <!-- [https://codepen.io/kennethlarotyamat/full/XWyLXvm] [ need to fix images for hamburger project ]  -->
    <!-- [11/06/2023 08:56 AM] [Leaflet Update Point] [11/05/2023 06:00 AM] I want to make revisions to the hamburger project. I could probably do the map thing there. Leaflet. It's called Leaflet. -->
...

/* <!-- <script src="https://kennethlarotyamat.github.io/miscellaneous/index.js"></script> -->

<!-- <script src="https://[username].github.io/[repository]/[filename].js"></script> -->

<!-- <link rel="stylesheet" href="https://kennethlarotyamat.github.io/miscellaneous/index.css"> -->
<!-- <script src="https://kennethlarotyamat.github.io/miscellaneous/index.css"></script> -->

<!-- <script src="https://kennethlarotyamat.github.io/miscellaneous/index.js"></script> -->

<!-- <script src="https://[username].github.io/[repository]/[filename].js"></script> -->
 */

 ...